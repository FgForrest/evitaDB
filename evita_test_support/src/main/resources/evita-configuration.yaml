name: ${server.name:evitaDB}

server:
  requestThreadPool:
    minThreadCount: ${server.requestThreadPool.minThreadCount:4}
    maxThreadCount: ${server.requestThreadPool.maxThreadCount:16}
    threadPriority: ${server.requestThreadPool.threadPriority:5}
    queueSize: ${server.requestThreadPool.queueSize:100}
  transactionThreadPool:
    minThreadCount: ${server.transactionThreadPool.minThreadCount:4}
    maxThreadCount: ${server.transactionThreadPool.maxThreadCount:16}
    threadPriority: ${server.transactionThreadPool.threadPriority:5}
    queueSize: ${server.transactionThreadPool.queueSize:100}
  serviceThreadPool:
    minThreadCount: ${server.serviceThreadPool.minThreadCount:4}
    maxThreadCount: ${server.serviceThreadPool.maxThreadCount:16}
    threadPriority: ${server.serviceThreadPool.threadPriority:5}
    queueSize: ${server.serviceThreadPool.queueSize:100}
  queryTimeoutInMilliseconds: ${server.queryTimeoutInMilliseconds:5000}
  transactionTimeoutInMilliseconds: ${server.transactionTimeoutInMilliseconds:300000}
  closeSessionsAfterSecondsOfInactivity: ${server.closeSessionsAfterSecondsOfInactivity:60}
  readOnly: ${server.readOnly:false}
  quiet: ${server.quiet:false}
  trafficRecording:
    enabled: ${server.trafficRecording.enabled:false}
    sourceQueryTracking: ${server.trafficRecording.sourceQueryTracking:false}
    trafficMemoryBufferSizeInBytes: ${server.trafficRecording.trafficMemoryBufferSizeInBytes:4MB}
    trafficDiskBufferSizeInBytes: ${server.trafficRecording.trafficDiskBufferSizeInBytes:32MB}
    trafficSamplingPercentage: ${server.trafficRecording.trafficSamplingPercentage:100}

storage:
  storageDirectory: ${storage.storageDirectory:null}
  exportDirectory: ${storage.exportDirectory:null}
  lockTimeoutSeconds: ${storage.lockTimeoutSeconds:60}
  waitOnCloseSeconds: ${storage.waitOnCloseSeconds:60}
  outputBufferSize: ${storage.outputBufferSize:4MB}
  maxOpenedReadHandles: ${storage.maxOpenedReadHandles:12}
  computeCRC32C: ${storage.computeCRC32C:true}
  minimalActiveRecordShare: ${storage.minimalActiveRecordShare:0.5}
  fileSizeCompactionThresholdBytes: ${storage.fileSizeCompactionThresholdBytes:100M}
  timeTravelEnabled: ${storage.timeTravelEnabled:true}
  exportDirectorySizeLimitBytes: ${storage.exportDirectorySizeLimitBytes:1G}
  exportFileHistoryExpirationSeconds: ${storage.exportFileHistoryExpirationSeconds:7d}

transaction:
  transactionWorkDirectory: ${transaction.workDirectory:null}
  transactionMemoryBufferLimitSizeBytes: ${transaction.memoryBufferLimitSize:16M}
  transactionMemoryRegionCount: ${transaction.memoryRegionCount:256}
  walFileSizeBytes: ${transaction.walFilSize:16M}
  walFileCountKept: ${transaction.walFileCountKept:8}
  flushFrequencyInMillis: ${transaction.flushFrequencyInMillis:1000}

cache:
  enabled: ${cache.enabled:true}
  reflection: ${cache.reflection:CACHE}
  reevaluateEachSeconds: ${cache.reevaluateEachSeconds:60}
  anteroomRecordCount: ${cache.anteroomRecordCount:100K}
  minimalComplexityThreshold: ${cache.minimalComplexityThreshold:10K}
  minimalUsageThreshold: ${cache.minimalUsageThreshold:2}
  cacheSizeInBytes: ${cache.cacheSizeInBytes:null}

api:
  workerGroupThreads: ${api.workerGroupThreads:null}
  idleTimeoutInMillis: ${api.idleTimeoutInMillis:2K}
  requestTimeoutInMillis: ${api.requestTimeoutInMillis:2K}
  maxEntitySizeInBytes: ${api.maxEntitySizeInBytes:2MB}
  accessLog: ${api.accessLog:false}
  certificate:
    generateAndUseSelfSigned: ${api.certificate.generateAndUseSelfSigned:true}
    folderPath: ${storage.storageDirectory}-certificates
    custom:
      certificate: ${api.certificate.custom.certificate:null}
      privateKey: ${api.certificate.custom.privateKey:null}
      privateKeyPassword: ${api.certificate.custom.privateKeyPassword:null}
  endpointDefaults:
    enabled: ${api.endpointDefaults.enabled:true}
    host: ${api.endpointDefaults.host:":5555"}
    exposeOn: ${api.endpointDefaults.exposeOn:"localhost"}
    tlsMode: ${api.endpointDefaults.tlsMode:FORCE_TLS}
    keepAlive: ${api.endpointDefaults.keepAlive:null}
  endpoints:
    system:
      enabled: ${api.endpoints.system.enabled:null}
      host: ${api.endpoints.system.host:null}
      exposeOn: ${api.endpoints.system.exposeOn:null}
      tlsMode: ${api.endpoints.system.tlsMode:FORCE_NO_TLS}
      keepAlive: ${api.endpoints.system.keepAlive:null}
    graphQL:
      enabled: ${api.endpoints.graphQL.enabled:null}
      host: ${api.endpoints.graphQL.host:null}
      exposeOn: ${api.endpoints.graphQL.exposeOn:null}
      tlsMode: ${api.endpoints.graphQL.tlsMode:null}
      keepAlive: ${api.endpoints.graphQL.keepAlive:null}
      parallelize: ${api.endpoints.graphQL.parallelize:true}
    rest:
      enabled: ${api.endpoints.rest.enabled:null}
      host: ${api.endpoints.rest.host:null}
      exposeOn: ${api.endpoints.rest.exposeOn:null}
      tlsMode: ${api.endpoints.rest.tlsMode:null}
      keepAlive: ${api.endpoints.rest.keepAlive:null}
    gRPC:
      enabled: ${api.endpoints.gRPC.enabled:true}
      host: ${api.endpoints.gRPC.host:null}
      exposeOn: ${api.endpoints.gRPC.exposeOn:null}
      tlsMode: ${api.endpoints.gRPC.tlsMode:null}
      keepAlive: ${api.endpoints.gRPC.keepAlive:null}
      exposeDocsService: ${api.endpoints.gRPC.exposeDocsService:false}
      mTLS:
        enabled: ${api.endpoints.gRPC.mTLS.enabled:false}
        allowedClientCertificatePaths: ${api.endpoints.gRPC.mTLS.allowedClientCertificatesPaths:[]}
    lab:
      enabled: ${api.endpoints.lab.enabled:null}
      host: ${api.endpoints.lab.host:null}
      exposeOn: ${api.endpoints.lab.exposeOn:null}
      tlsMode: ${api.endpoints.lab.tlsMode:null}
      keepAlive: ${api.endpoints.lab.keepAlive:null}
      gui:
        enabled: false
        readOnly: ${api.endpoints.lab.gui.readOnly:false}
    observability:
      enabled: ${api.endpoints.observability.enabled:false}
      host: ${api.endpoints.observability.host:null}
      exposeOn: ${api.endpoints.observability.exposeOn:null}
      tlsMode: ${api.endpoints.observability.tlsMode:FORCE_NO_TLS}
      keepAlive: ${api.endpoints.observability.keepAlive:null}
      tracing:
        endpoint: ${api.endpoints.observability.tracing.endpoint:null}
        protocol: ${api.endpoints.observability.tracing.protocol:grpc}
      allowedEvents: !include ${api.endpoints.observability.allowedEvents:null}
