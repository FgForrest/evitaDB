{
  "openapi": "3.0.0",
  "info": {
	"version": "1.0.0",
	"title": "Swagger Petstore",
	"license": {
	  "name": "MIT"
	}
  },
  "servers": [
	{
	  "url": "http://petstore.swagger.io/v1"
	}
  ],
  "paths": {
	"/pets": {
	  "get": {
		"summary": "List all pets",
		"operationId": "listPets",
		"tags": [
		  "pets"
		],
		"parameters": [
		  {
			"name": "limit",
			"in": "query",
			"description": "How many items to return at one time (max 100)",
			"required": false,
			"schema": {
			  "type": "integer",
			  "format": "int32"
			}
		  }
		],
		"responses": {
		  "200": {
			"description": "An paged array of pets",
			"headers": {
			  "x-next": {
				"description": "A link to the next page of responses",
				"schema": {
				  "type": "string"
				}
			  }
			},
			"content": {
			  "application/json": {
				"schema": {
				  "type": "array",
				  "items": {
					"$ref": "#/components/schemas/Pet"
				  }
				}
			  }
			}
		  },
		  "default": {
			"description": "unexpected error",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/Error"
				}
			  }
			}
		  }
		}
	  },
	  "post": {
		"summary": "Create a pet",
		"operationId": "createPets",
		"tags": [
		  "pets"
		],
		"responses": {
		  "201": {
			"description": "Null response"
		  },
		  "default": {
			"description": "unexpected error",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/Error"
				}
			  }
			}
		  }
		}
	  },
	  "patch": {
		"summary": "Update a pet",
		"operationId": "updatePets",
		"deprecated": true,
		"tags": [
		  "pets"
		],
		"requestBody": {
		  "content": {
			"application/json": {
			  "schema": {
				"anyOf": [
				  {
					"$ref": "#/components/schemas/PetByAge"
				  },
				  {
					"$ref": "#/components/schemas/PetByType"
				  }
				]
			  }
			}
		  }
		},
		"responses": {
		  "200": {
			"description": "Updated"
		  }
		}
	  }
	},
	"/pets/{petId}": {
	  "get": {
		"summary": "Info for a specific pet",
		"operationId": "showPetById",
		"tags": [
		  "pets"
		],
		"parameters": [
		  {
			"name": "petId",
			"in": "path",
			"required": true,
			"description": "The id of the pet to retrieve",
			"schema": {
			  "type": "string"
			}
		  }
		],
		"responses": {
		  "200": {
			"description": "Expected response to a valid request",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/Pet"
				}
			  }
			}
		  },
		  "default": {
			"description": "unexpected error",
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/Error"
				}
			  }
			}
		  }
		}
	  }
	}
  },
  "components": {
	"schemas": {
	  "Pet": {
		"required": [
		  "id",
		  "name"
		],
		"type": "object",
		"properties": {
		  "id": {
			"type": "integer",
			"format": "int64"
		  },
		  "name": {
			"type": "string"
		  },
		  "tag": {
			"type": "string"
		  },
		  "animal": {
			"$ref": "#/components/schemas/PetAnimal"
		  }
		}
	  },
	  "PetAnimal": {
		"oneOf": [
		  {
			"$ref": "#/components/schemas/Dog"
		  },
		  {
			"$ref": "#/components/schemas/Parrot"
		  }
		]
	  },
	  "Animal": {
		"type": "object",
		"properties": {
		  "breed": {
			"type": "string"
		  }
		}
	  },
	  "Dog": {
		"allOf": [
		  {
			"$ref": "#/components/schemas/Animal"
		  },
		  {
			"type": "object",
			"properties": {
			  "favouriteToy": {
				"type": "string"
			  }
			}
		  }
		]
	  },
	  "Parrot": {
		"allOf": [
		  {
			"$ref": "#/components/schemas/Animal"
		  },
		  {
			"type": "object",
			"properties": {
			  "favouritePhrase": {
				"type": "string"
			  }
			}
		  }
		]
	  },
	  "PetByAge": {
		"type": "object",
		"properties": {
		  "age": {
			"type": "integer"
		  },
		  "nickname": {
			"type": "string"
		  }
		},
		"required": [
		  "age"
		]
	  },
	  "PetByType": {
		"type": "object",
		"properties": {
		  "pet_type": {
			"type": "string",
			"enum": [
			  "Cat",
			  "Dog"
			]
		  },
		  "hunts": {
			"type": "boolean"
		  }
		},
		"required": [
		  "pet_type"
		]
	  },
	  "Error": {
		"required": [
		  "code",
		  "message"
		],
		"properties": {
		  "code": {
			"type": "integer",
			"format": "int32"
		  },
		  "message": {
			"type": "string"
		  }
		}
	  }
	}
  }
}