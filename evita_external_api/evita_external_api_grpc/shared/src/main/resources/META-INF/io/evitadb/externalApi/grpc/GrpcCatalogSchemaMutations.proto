syntax = "proto3";

package io.evitadb.externalApi.grpc.generated;
option java_multiple_files = true;
option csharp_namespace = "EvitaDB";

import "GrpcEnums.proto";
import "GrpcEntitySchemaMutation.proto";
import "google/protobuf/wrappers.proto";

// Mutation is responsible for setting value to a `CatalogSchema.description` in `CatalogSchema`.
message GrpcModifyCatalogSchemaDescriptionMutation {
  // Contains description of the model is optional but helps authors of the schema / client API to better
  // explain the original purpose of the model to the consumers.
  google.protobuf.StringValue description = 1;
}

// Mutation is responsible for adding one or more modes to a `CatalogSchema.catalogEvolutionMode` in `CatalogSchema`.
message GrpcAllowEvolutionModeInCatalogSchemaMutation {
  // Set of allowed catalog evolution modes. These allow to specify how strict is evitaDB when unknown
  // information is presented to her for the first time. When no evolution mode is set, each violation of the
  // `CatalogSchema` is reported by an error. This behaviour can be changed by this evolution mode, however.
  repeated GrpcCatalogEvolutionMode evolutionModes = 1;
}

// Mutation is responsible for removing one or more modes from a `CatalogSchema.evolutionMode` in `CatalogSchema`.
message GrpcDisallowEvolutionModeInCatalogSchemaMutation {
  // Set of forbidden evolution modes. These allow to specify how strict is evitaDB when unknown information is
  // presented to her for the first time. When no evolution mode is set, each violation of the `CatalogSchema` is
  // reported by an error. This behaviour can be changed by this evolution mode, however.
  repeated GrpcCatalogEvolutionMode evolutionModes = 1;
}

// Mutation is responsible for setting up a new `EntitySchema` - or more precisely the collection within catalog.
message GrpcCreateEntitySchemaMutation {
  // Name of newly created entity schema.
  string entityType = 1;
}

// Mutation is a holder for a set of `EntitySchemaMutation` that affect a single entity schema within the `CatalogSchema`.
message GrpcModifyEntitySchemaMutation {
  // Entity type of entity schema that will be affected by passed mutations.
  string entityType = 1;
  // Collection of mutations that should be applied on current version of the schema.
  repeated GrpcEntitySchemaMutation entitySchemaMutations = 2;
}

// Mutation is responsible for renaming an existing `EntitySchema`.
message GrpcModifyEntitySchemaNameMutation {
  // Name of the entity schema the mutation is targeting.
  string name = 1;
  // New name of the entity schema the mutation is targeting.
  string newName = 2;
  // Whether to overwrite entity collection with same name as the `newName` if found.
  bool overwriteTarget = 3;
}

// Mutation is responsible for removing an existing `EntitySchema`.
message GrpcRemoveEntitySchemaMutation {
  // Name of entity schema to remove.
  string name = 1;
}