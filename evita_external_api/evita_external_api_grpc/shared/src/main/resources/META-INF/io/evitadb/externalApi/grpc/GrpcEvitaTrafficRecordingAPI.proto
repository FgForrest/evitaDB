syntax = "proto3";

package io.evitadb.externalApi.grpc.generated;
option java_multiple_files = true;
option csharp_namespace = "EvitaDB";

import "google/protobuf/empty.proto";
import "GrpcEnums.proto";
import "GrpcEvitaDataTypes.proto";
import "google/protobuf/wrappers.proto";
import "GrpcTrafficRecording.proto";

// Request to GetTrafficHistoryList request.
message GetTrafficHistoryListRequest {
  // The limit of records to return
  int32 limit = 1;
  // The criteria of the traffic recording, allows to define constraints on the returned records
  GrpcTrafficRecordingCaptureCriteria criteria = 2;
}

// Response to GetTrafficHistoryList request.
message GetTrafficHistoryListResponse {
  // The list of traffic records that match the criteria
  repeated GrpcTrafficRecord trafficRecord = 1;
}

// Request to GetTrafficHistory request.
message GetTrafficHistoryRequest {
  // The criteria of the traffic recording, allows to define constraints on the returned records
  GrpcTrafficRecordingCaptureCriteria criteria = 1;
}

// Response to GetTrafficHistory request.
message GetTrafficHistoryResponse {
  // The list of traffic records that match the criteria
  repeated GrpcTrafficRecord trafficRecord = 1;
}

// Response to GetTrafficRecordingLabelsNamesOrderedByCardinality request.
message GetTrafficRecordingLabelNamesRequest {
  // The limit of records to return
  int32 limit = 1;
  // Allows to filter the returned labels by the name prefix
  google.protobuf.StringValue nameStartsWith = 2;
}

// Response to GetTrafficRecordingLabelsNamesOrderedByCardinality response.
message GetTrafficRecordingLabelNamesResponse {
  // The list of labels names that match the criteria
  repeated string labelName = 1;
}

// Response to GetTrafficRecordingLabelsValuesOrderedByCardinality request.
message GetTrafficRecordingValuesNamesRequest {
  // The limit of records to return
  int32 limit = 1;
  // The name of the label to get the values for
  string labelName = 2;
  // Allows to filter the returned labels by the name prefix
  google.protobuf.StringValue valueStartsWith = 3;
}

// Response to GetTrafficRecordingLabelsValuesOrderedByCardinality response.
message GetTrafficRecordingValuesNamesResponse {
  // The list of labels values that match the criteria
  repeated string labelValue = 1;
}

// Request to StartTrafficRecording request.
message GrpcStartTrafficRecordingRequest {
  // The sampling rate of the traffic recording (100 means all records will be recorded, 1 means 1% of records will be recorded)
  int32 samplingRate = 1;
  // If true the recording will be exported to a file, otherwise only internal ring buffer will be made available for
  // the time the traffic recording is running.
  bool exportFile = 2;
  // The duration of the recording in milliseconds, after this time the recording will be stopped automatically.
  google.protobuf.Int64Value maxDurationInMilliseconds = 3;
  // The size of the recording in bytes, after this size the recording will be stopped automatically.
  google.protobuf.Int64Value maxFileSizeInBytes = 4;
  // The size of the chunk file in bytes. Individual files in the export file will be approximately this size.
  google.protobuf.Int64Value chunkFileSizeInBytes = 5;
}

// Request to StopTrafficRecording request.
message GrpcStopTrafficRecordingRequest {
  // The ID of the task that started the recording
  GrpcUuid taskStatusId = 1;
}

// Response to StartTrafficRecording and  request.
message GetTrafficRecordingStatusResponse {
  // The status of the recording task
  GrpcTaskStatus taskStatus = 1;
}

service GrpcEvitaTrafficRecordingService {

  // Procedure that returns requested list of past traffic records with limited size that match the request criteria.
  // Order of the returned records is from the newest sessions to the oldest,
  // traffic records within the session are ordered from the newest to the oldest.
  rpc GetTrafficRecordingHistoryList(GetTrafficHistoryListRequest) returns (GetTrafficHistoryListResponse);
  // Procedure that returns stream of all past traffic records that match the request criteria.
  // Order of the returned records is from the newest sessions to the oldest,
  // traffic records within the session are ordered from the newest to the oldest.
  rpc GetTrafficRecordingHistory(GetTrafficHistoryRequest) returns (stream GetTrafficHistoryResponse);
  // Procedure returns a list of top unique labels names ordered by cardinality of their values present in the traffic recording.
  rpc GetTrafficRecordingLabelsNamesOrderedByCardinality(GetTrafficRecordingLabelNamesRequest) returns (stream GetTrafficRecordingLabelNamesResponse);
  // Procedure returns a list of top unique label values ordered by cardinality of their values present in the traffic recording.
  rpc GetTrafficRecordingLabelValuesOrderedByCardinality(GetTrafficRecordingValuesNamesRequest) returns (stream GetTrafficRecordingValuesNamesResponse);
  // Procedure that starts the traffic recording for the given criteria and settings
  rpc StartTrafficRecording(GrpcStartTrafficRecordingRequest) returns (GetTrafficRecordingStatusResponse);
  // Procedure that stops the traffic recording
  rpc StopTrafficRecording(GrpcStopTrafficRecordingRequest) returns (GetTrafficRecordingStatusResponse);

}