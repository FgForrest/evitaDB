syntax = "proto3";

package io.evitadb.externalApi.grpc.generated;
option java_multiple_files = true;
option csharp_namespace = "EvitaDB";

import "GrpcCatalogSchemaMutation.proto";
import "GrpcEvitaDataTypes.proto";

// Mutation is responsible for setting up a new CatalogSchema.
message GrpcCreateCatalogSchemaMutation {
  // Name of newly created catalog schema.
  string catalogName = 1;
}

// Mutation is responsible for renaming an existing CatalogSchema.
message GrpcModifyCatalogSchemaNameMutation {
  // Name of the catalog schema the mutation is targeting (will rename).
  string catalogName = 1;
  // The new name of the catalog schema.
  string newCatalogName = 2;
  // Flag indicating whether to replace the existing catalog or just to rename it.
  bool overwriteTarget = 3;
}

// Mutation is responsible for altering an existing CatalogSchema.
message GrpcModifyCatalogSchemaMutation {
  // Name of the catalog schema the mutation is targeting (will rename).
  string catalogName = 1;
  // Collection of schema mutations that should be applied on current version of the catalog schema.
  repeated GrpcLocalCatalogSchemaMutation schemaMutations = 2;
}

// Mutation that transitions a catalog to the "live" state, making it transactional.
message GrpcMakeCatalogAliveMutation {
  // Name of the catalog schema the mutation is targeting (will rename).
  string catalogName = 1;
}

// Mutation is responsible for removing an existing CatalogSchema.
message GrpcRemoveCatalogSchemaMutation {
  // Name of catalog schema to remove.
  string catalogName = 1;
}

// This transaction mutation delimits mutations of one transaction from another. It contains data that allow to recognize
// the scope of the transaction and verify its integrity.
message GrpcTransactionMutation {
  // Represents the unique identifier of a transaction.
  GrpcUuid transactionId = 1;
  // Represents the next version the transaction transitions the state to.
  int64 version = 2;
  // Represents the number of mutations in this particular transaction.
  int32 mutationCount = 3;
  // Represents the size of the serialized transaction mutations that follow this mutation in bytes.
  int64 walSizeInBytes = 4;
  // Represents the timestamp of the commit.
  GrpcOffsetDateTime commitTimestamp = 5;
}

// This structure encapsulates all mutations that needs to be executed on entire evitaDB level and not locally to
// single catalog schema instance.
message GrpcEngineMutation {
  // The top level catalog schema mutation to be executed.
  oneof mutation {
    // Mutation is responsible for setting up a new CatalogSchema.
    GrpcCreateCatalogSchemaMutation createCatalogSchemaMutation = 1;
    // Mutation is responsible for renaming an existing CatalogSchema.
    GrpcModifyCatalogSchemaNameMutation modifyCatalogSchemaNameMutation = 2;
    // Mutation is responsible for renaming an existing CatalogSchema.
    GrpcModifyCatalogSchemaMutation modifyCatalogSchemaMutation = 3;
    // Mutation that transitions a catalog to the "live" state, making it transactional.
    GrpcMakeCatalogAliveMutation makeCatalogAliveMutation = 4;
    // Mutation is responsible for removing an existing CatalogSchema.
    GrpcRemoveCatalogSchemaMutation removeCatalogSchemaMutation = 5;
    // Mutation delimits one transaction from another.
    GrpcTransactionMutation transactionMutation = 6;
  }
}