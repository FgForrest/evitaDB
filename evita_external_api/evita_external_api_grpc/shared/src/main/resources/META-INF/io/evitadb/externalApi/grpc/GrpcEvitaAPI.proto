syntax = "proto3";

package io.evitadb.externalApi.grpc.generated;
option java_multiple_files = true;
option csharp_namespace = "EvitaDB";

import "google/protobuf/empty.proto";
import "GrpcEnums.proto";
import "GrpcEvitaDataTypes.proto";
import "GrpcCatalogSchemaMutation.proto";
import "google/protobuf/wrappers.proto";

// Response to a server status request.
message GrpcEvitaServerStatusResponse {
  // Version of evitaDB server taken from the MANIFEST.MF file
  string version = 1;
  // Date and time when the server was started
  GrpcOffsetDateTime startedAt = 2;
  // Duration of time since the server was started (seconds)
  int64 uptime = 3;
  // Unique identifier of the server instance
  string instanceId = 4;
  // Number of corrupted catalogs
  int32 catalogsCorrupted = 5;
  // Number of catalogs that are ok
  int32 catalogsOk = 6;
}

// Request to create a session inside of a catalog.
message GrpcEvitaSessionRequest {
  // The name of the catalog for which the session is to be created.
  string catalogName = 1;
  // Commit behaviour
  GrpcCommitBehavior commitBehavior = 2;
  // For testing purposes. Flag indicating that all changes by the session should be rollbacked after the session is closed.
  bool dryRun = 3;
}

// Response to a session creation request.
message GrpcEvitaSessionResponse {
  // UUID of the created session.
  string sessionId = 1;
  // Type of the created session.
  GrpcSessionType sessionType = 2;
  // Commit behaviour
  GrpcCommitBehavior commitBehaviour = 3;
  // State of the catalog after the session was created.
  GrpcCatalogState catalogState = 4;
  // UUID of the catalog the session is bound to.
  string catalogId = 5;
}

// Request to terminate a session.
message GrpcEvitaSessionTerminationRequest {
  // Name of the catalog for which the session is to be terminated.
  string catalogName = 1;
  // UUID of the session to be terminated.
  string sessionId = 2;
}

// Response to a session termination request.
message GrpcEvitaSessionTerminationResponse {
  // Indicator whether the session was terminated successfully.
  bool terminated = 1;
}

// Response to a catalog names request.
message GrpcCatalogNamesResponse {
  // Names of all existing catalogs.
  repeated string catalogNames = 1;
}

// Request to define a new catalog.
message GrpcDefineCatalogRequest {
  // Name of the catalog to be defined.
  string catalogName = 1;
}

// Response to a catalog definition request.
message GrpcDefineCatalogResponse {
  // Indicator whether the catalog was defined successfully.
  bool success = 1;
}

// Request to rename a catalog.
message GrpcRenameCatalogRequest {
  // Name of the catalog to be renamed.
  string catalogName = 1;
  // New name of the catalog.
  string newCatalogName = 2;
}

// Response to a catalog rename request.
message GrpcRenameCatalogResponse {
  // Indicator whether the catalog was renamed successfully.
  bool success = 1;
}

// Request to replace a catalog.
message GrpcReplaceCatalogRequest {
  // Name of the catalog that will become the successor of the original catalog (old name)
  string catalogNameToBeReplacedWith = 1;
  // Name of the catalog that will be replaced and dropped (new name)
  string catalogNameToBeReplaced = 2;
}

// Response to a catalog replace request.
message GrpcReplaceCatalogResponse {
  // Indicator whether the catalog was replaced successfully.
  bool success = 1;
}

// Request to restore a catalog.
message GrpcRestoreCatalogRequest {
  // Name of the catalog where the backup will be restored
  // The name must not clash with any of existing catalogs
  string catalogName = 1;
  // Binary contents of the backup file.
  bytes backupFile = 2;
}

// Request to restore a catalog.
message GrpcRestoreCatalogFromServerFileRequest {
  // Name of the catalog where the backup will be restored
  // The name must not clash with any of existing catalogs
  string catalogName = 1;
  // The identification of the file on the server that should be restored
  GrpcUuid fileId = 2;
}

// Response to a catalog restore request.
message GrpcRestoreCatalogResponse {
  // returns the number of bytes read from the backup file
  int64 read = 1;
  // the id of the task that is used to restore the catalog and getting its progress
  GrpcUuid taskId = 2;
}

// Request to delete a catalog.
message GrpcDeleteCatalogIfExistsRequest {
  // Name of the catalog to be deleted.
  string catalogName = 1;
}

// Response to a catalog deletion request.
message GrpcDeleteCatalogIfExistsResponse {
  // Indicator whether the catalog was deleted successfully.
  bool success = 1;
}

// Request to update the catalog.
message GrpcUpdateEvitaRequest {
  // Collection of top level catalog schema mutations to be applied.
  repeated GrpcTopLevelCatalogSchemaMutation schemaMutations = 1;
}

// identification of the file available for fetching
message GrpcFile {
  // Identification of the file
  GrpcUuid fileId = 1;
  // File name
  string name = 2;
  // Detailed description of the file
  google.protobuf.StringValue description = 3;
  // Content type of the file
  string contentType = 4;
  // Size of the file in bytes
  int64 totalSizeInBytes = 5;
  // Origin of the file (usually the taskType)
  google.protobuf.StringValue origin = 6;
}

// Record representing status of particular asynchronous task
message GrpcTaskStatus {
  string taskType = 1;
  string taskName = 2;
  GrpcUuid taskId = 3;
  google.protobuf.StringValue catalogName = 4;
  GrpcOffsetDateTime issued = 5;
  GrpcOffsetDateTime started = 6;
  GrpcOffsetDateTime finished = 7;
  int32 progress = 8;
  google.protobuf.StringValue settings = 9;
  oneof result {
    google.protobuf.StringValue text = 10;
    GrpcFile file = 11;
  }
  google.protobuf.StringValue exception = 12;
}

// Request to list task statuses in paginated form.
message GrpcTaskStatusesRequest {
  // Page number of the task statuses to be listed.
  int32 pageNumber = 1;
  // Number of task statuses per page.
  int32 pageSize = 2;
}

// Response to a task statuses request.
message GrpcTaskStatusesResponse {
  // The size of the page.
  int32 pageSize = 1;
  // The number of the page.
  int32 pageNumber = 2;
  // Collection of task statuses.
  repeated GrpcTaskStatus taskStatuses = 3;
  // Total number of task statuses.
  int32 totalNumberOfRecords = 4;
}

// Request to get single task status by id
message GrpcTaskStatusRequest {
  // Identification of the task
  GrpcUuid taskId = 1;
}

// Response to a task status request.
message GrpcTaskStatusResponse {
  // Task status if found
  GrpcTaskStatus taskStatus = 1;
}

// Request to get cancel task status by id
message GrpcCancelTaskRequest {
  // Identification of the task
  GrpcUuid taskId = 1;
}

// Request to get cancel task status by id
message GrpcCancelTaskResponse {
  // true if the task was found and canceled
  bool success = 1;
}

// Request to list task statuses in paginated form.
message GrpcFilesToFetchRequest {
  // Page number of the task statuses to be listed.
  int32 pageNumber = 1;
  // Number of task statuses per page.
  int32 pageSize = 2;
  // Optional origin of the files (derived from taskType), passing non-null value
  // in this argument filters the returned files to only those that are related to the specified origin
  google.protobuf.StringValue origin = 3;
}

// Response to a task statuses request.
message GrpcFilesToFetchResponse {
  // The size of the page.
  int32 pageSize = 1;
  // The number of the page.
  int32 pageNumber = 2;
  // Collection of files to fetch.
  repeated GrpcFile filesToFetch = 3;
  // Total number of files to fetch.
  int32 totalNumberOfRecords = 4;
}

// Request to get single file by id
message GrpcFetchFileRequest {
  // Identification of the file
  GrpcUuid fileId = 1;
}

// Response to a task status request.
message GrpcFetchFileResponse {
  // chunk of the file content
  bytes fileContents = 1;
  // total size of the file
  int64 totalSizeInBytes = 2;
}

// This service contains RPCs that could be called by gRPC clients on evitaDB. Main purpose of this service is to provide
// a way to create sessions and catalogs, and to update the catalog.
service EvitaService {
  // Procedure used to obtain server status.
  rpc ServerStatus(google.protobuf.Empty) returns (GrpcEvitaServerStatusResponse);
  // Procedure used to create read only sessions.
  rpc CreateReadOnlySession(GrpcEvitaSessionRequest) returns (GrpcEvitaSessionResponse);
  // Procedure used to create read write sessions.
  rpc CreateReadWriteSession(GrpcEvitaSessionRequest) returns (GrpcEvitaSessionResponse);
  // Procedure used to create read-only session which will return data in binary format. Part of the Private API.
  rpc CreateBinaryReadOnlySession(GrpcEvitaSessionRequest) returns (GrpcEvitaSessionResponse);
  // Procedure used to create read-write session which will return data in binary format. Part of the Private API.
  rpc CreateBinaryReadWriteSession(GrpcEvitaSessionRequest) returns (GrpcEvitaSessionResponse);
  // Procedure used to terminate existing session.
  rpc TerminateSession(GrpcEvitaSessionTerminationRequest) returns (GrpcEvitaSessionTerminationResponse);
  // Procedure used to get names of all existing catalogs.
  rpc GetCatalogNames(google.protobuf.Empty) returns (GrpcCatalogNamesResponse);
  // Procedure used to define a new catalog.
  rpc DefineCatalog(GrpcDefineCatalogRequest) returns (GrpcDefineCatalogResponse);
  // Procedure used to rename an existing catalog.
  rpc RenameCatalog(GrpcRenameCatalogRequest) returns (GrpcRenameCatalogResponse);
  // Procedure used to replace an existing catalog.
  rpc ReplaceCatalog(GrpcReplaceCatalogRequest) returns (GrpcReplaceCatalogResponse);
  // Procedure used to restore a catalog from backup.
  rpc RestoreCatalog(stream GrpcRestoreCatalogRequest) returns (GrpcRestoreCatalogResponse);
  // Procedure used to restore a catalog from backup.
  rpc RestoreCatalogFromServerFile(stream GrpcRestoreCatalogFromServerFileRequest) returns (GrpcRestoreCatalogResponse);
  // Procedure used to delete an existing catalog.
  rpc DeleteCatalogIfExists(GrpcDeleteCatalogIfExistsRequest) returns (GrpcDeleteCatalogIfExistsResponse);
  // Procedure used to update the catalog with a set of mutations.
  rpc Update(GrpcUpdateEvitaRequest) returns (google.protobuf.Empty);
  // Procedure used to get listing of task statuses.
  rpc ListTaskStatuses(GrpcTaskStatusesRequest) returns (GrpcTaskStatusesResponse);
  // Procedure used to get detail of particular task status.
  rpc GetTaskStatus(GrpcTaskStatusRequest) returns (GrpcTaskStatusResponse);
  // Procedure used to cancel queued or running task.
  rpc CancelTask(GrpcCancelTaskRequest) returns (GrpcCancelTaskResponse);
  // Procedure used to get listing of files available for fetching.
  rpc ListFilesToFetch(GrpcFilesToFetchRequest) returns (GrpcFilesToFetchResponse);
  // Procedure used to get file contents
  rpc FetchFile(GrpcFetchFileRequest) returns (GrpcFetchFileResponse);

}
