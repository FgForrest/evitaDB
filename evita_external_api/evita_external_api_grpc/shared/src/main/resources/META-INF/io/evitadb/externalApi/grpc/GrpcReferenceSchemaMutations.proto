syntax = "proto3";

package io.evitadb.externalApi.grpc.generated;
option java_multiple_files = true;
option csharp_namespace = "EvitaDB";

import "GrpcEnums.proto";
import "GrpcEvitaDataTypes.proto";
import "GrpcAttributeSchemaMutations.proto";
import "GrpcSortableAttributeCompoundSchemaMutations.proto";
import "google/protobuf/wrappers.proto";

// Mutation is responsible for setting up a new `ReferenceSchema` in the `EntitySchema`.
// Mutation can be used for altering also the existing `ReferenceSchema` alone.
message GrpcCreateReferenceSchemaMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Contains description of the model is optional but helps authors of the schema / client API to better
  // explain the original purpose of the model to the consumers.
  google.protobuf.StringValue description = 2;
  // Deprecation notice contains information about planned removal of this schema from the model / client API.
  // This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
  google.protobuf.StringValue deprecationNotice = 3;
  // Cardinality describes the expected count of relations of this type. In evitaDB we define only one-way
  // relationship from the perspective of the entity. We stick to the ERD modelling
  // [standards](https://www.gleek.io/blog/crows-foot-notation.html) here. Cardinality affect the design
  // of the client API (returning only single reference or collections) and also help us to protect the consistency
  // of the data so that conforms to the creator mental model.
  GrpcCardinality cardinality = 4;
  // Reference to `EntitySchema.name` of the referenced entity. Might be also any `String`
  // that identifies type some external resource not maintained by Evita.
  string referencedEntityType = 5;
  // Whether `referencedEntityType` refers to any existing `EntitySchema.name` that is
  // maintained by Evita.
  bool referencedEntityTypeManaged = 6;
  // Reference to `EntitySchema.name` of the referenced group entity. Might be also any `String`
  // that identifies type some external resource not maintained by Evita.
  google.protobuf.StringValue referencedGroupType = 7;
  // Whether `referencedGroupType` refers to any existing `EntitySchema.name` that is
  // maintained by Evita.
  bool referencedGroupTypeManaged = 8;
  // Whether the index for this reference should be created and maintained allowing to filter by
  // `referenceHaving` filtering constraints. Index is also required when reference is
  // `faceted`.
  //
  // Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
  // Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
  // the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
  // alongside other references if requested.
  // deprecated in favor of `indexedInScopes`
  bool filterable = 9 [deprecated = true];
  // Whether the statistics data for this reference should be maintained and this allowing to get
  // `facetSummary` for this reference or use `facetInSet`
  // filtering query.
  //
  // Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
  // occupies (memory/disk) space in the form of index.
  // Reference that was marked as faceted is called Facet.
  // deprecated in favor of `facetedInScopes`
  bool faceted = 10 [deprecated = true];
  // Whether the index for this reference should be created and maintained allowing to filter by
  // `referenceHaving` filtering constraints. Index is also required when reference is
  // `faceted`.
  //
  // Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
  // Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
  // the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
  // alongside other references if requested.
  // deprecated in favor of `scopedIndexTypes`
  repeated GrpcEntityScope indexedInScopes = 11 [deprecated = true];
  // Whether the statistics data for this reference should be maintained and this allowing to get
  // `facetSummary` for this reference or use `facetInSet`
  // filtering query.
  //
  // Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
  // occupies (memory/disk) space in the form of index.
  // Reference that was marked as faceted is called Facet.
  repeated GrpcEntityScope facetedInScopes = 12;
  // Scoped reference index types that define both the scope and the type of index for the reference.
  // This replaces the deprecated `indexedInScopes` field with more granular control over indexing.
  repeated GrpcScopedReferenceIndexType scopedIndexTypes = 13;
}

// Mutation is responsible for setting up a new `ReflectedReferenceSchema` in the `EntitySchema`.
// Mutation can be used for altering also the existing `ReflectedReferenceSchema` alone.
message GrpcCreateReflectedReferenceSchemaMutation {

  // Name of the reference the mutation is targeting.
  string name = 1;
  // Contains description of the model is optional but helps authors of the schema / client API to better
  // explain the original purpose of the model to the consumers.
  google.protobuf.StringValue description = 2;
  // Deprecation notice contains information about planned removal of this schema from the model / client API.
  // This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
  google.protobuf.StringValue deprecationNotice = 3;
  // Cardinality describes the expected count of relations of this type. In evitaDB we define only one-way
  // relationship from the perspective of the entity. We stick to the ERD modelling
  // [standards](https://www.gleek.io/blog/crows-foot-notation.html) here. Cardinality affect the design
  // of the client API (returning only single reference or collections) and also help us to protect the consistency
  // of the data so that conforms to the creator mental model.
  GrpcCardinality cardinality = 4;
  // Reference to `EntitySchema.name` of the referenced entity. Might be also any `String`
  // that identifies type some external resource not maintained by Evita.
  string referencedEntityType = 5;
  // Name of the reflected reference of the target referencedEntityType(). The referenced entity must contain reference
  // of such name and this reference must target the entity where the reflected reference is defined, and the target
  // entity must be managed on both sides of the relation.
  string reflectedReferenceName = 6;
  // Whether the statistics data for this reference should be maintained and this allowing to get
  // `facetSummary` for this reference or use `facetInSet`
  // filtering query.
  //
  // Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
  // occupies (memory/disk) space in the form of index.
  // Reference that was marked as faceted is called Facet.
  google.protobuf.BoolValue faceted = 7 [deprecated = true];
  // Contains true if the attributes of the reflected reference are inherited from the target reference.
  GrpcAttributeInheritanceBehavior attributeInheritanceBehavior = 8;
  // The array of attribute names that are inherited / excluded from inheritance based on the value of
  // attributeInheritanceBehavior property.
  repeated string attributeInheritanceFilter = 9;
  // when set to true, the value of `indexedInScope` field is ignored and the settings are inherited from the original
  // reference.
  bool indexedInherited = 10;
  // Whether the index for this reference should be created and maintained allowing to filter by
  // `referenceHaving` filtering constraints. Index is also required when reference is
  // `faceted`.
  //
  // Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
  // Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
  // the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
  // alongside other references if requested.
  // deprecated in favor of `scopedIndexTypes`
  repeated GrpcEntityScope indexedInScopes = 11 [deprecated = true];
  // when set to true, the value of `facetedInScope` field is ignored and the settings are inherited from the original
  // reference.
  bool facetedInherited = 12;
  // Whether the statistics data for this reference should be maintained and this allowing to get
  // `facetSummary` for this reference or use `facetInSet`
  // filtering query.
  //
  // Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
  // occupies (memory/disk) space in the form of index.
  // Reference that was marked as faceted is called Facet.
  repeated GrpcEntityScope facetedInScopes = 13;
  // Scoped reference index types that define both the scope and the type of index for the reference.
  // This replaces the deprecated `indexedInScopes` field with more granular control over indexing.
  // When `indexedInherited` is true, this field is ignored.
  repeated GrpcScopedReferenceIndexType scopedIndexTypes = 14;
}

// Mutation is a holder for a single `AttributeSchema` that affect any of `ReferenceSchema.attributes` in the `EntitySchema`.
message GrpcModifyReferenceAttributeSchemaMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Nested attribute schema mutation that mutates reference attributes of targeted reference.
  GrpcAttributeSchemaMutation attributeSchemaMutation = 2;
}

// Mutation is a holder for a single `SortableAttributeCompoundSchema` that affect any of
// `ReferenceSchema.sortableAttributeCompound` in the `EntitySchema`.
message GrpcModifyReferenceSortableAttributeCompoundSchemaMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Nested sortable attribute compound schema mutation that mutates reference sortable attribute compounds of targeted reference.
  GrpcSortableAttributeCompoundSchemaMutation sortableAttributeCompoundSchemaMutation = 2;
}

// Mutation is responsible for setting value to a `ReferenceSchema.cardinality` in `EntitySchema`.
message GrpcModifyReferenceSchemaCardinalityMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Cardinality describes the expected count of relations of this type. In evitaDB we define only one-way
  // relationship from the perspective of the entity. We stick to the ERD modelling
  // [standards](https://www.gleek.io/blog/crows-foot-notation.html) here. Cardinality affect the design
  // of the client API (returning only single reference or collections) and also help us to protect the consistency
  // of the data so that conforms to the creator mental model.
  GrpcCardinality cardinality = 2;
}

// Mutation is responsible for setting value to a `ReferenceSchema.deprecationNotice` in `EntitySchema`.
message GrpcModifyReferenceSchemaDeprecationNoticeMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Deprecation notice contains information about planned removal of this schema from the model / client API.
  // This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
  google.protobuf.StringValue deprecationNotice = 2;
}

// Mutation is responsible for setting value to a `ReferenceSchema.description` in `EntitySchema`.
// Mutation can be used for altering also the existing `ReferenceSchema` alone.
message GrpcModifyReferenceSchemaDescriptionMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Contains description of the model is optional but helps authors of the schema / client API to better
  // explain the original purpose of the model to the consumers.
  google.protobuf.StringValue description = 2;
}

// Mutation is responsible for renaming an existing `ReferenceSchema` in `EntitySchema`.
// Mutation can be used for altering also the existing `ReferenceSchema` alone.
message GrpcModifyReferenceSchemaNameMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // New name of the reference the mutation is targeting.
  string newName = 2;
}

// Mutation is responsible for setting value to a `ReferenceSchema.referencedGroupType`in `EntitySchema`.
message GrpcModifyReferenceSchemaRelatedEntityGroupMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Reference to `EntitySchema.name` of the referenced group entity. Might be also any `String`
  // that identifies type some external resource not maintained by Evita.
  google.protobuf.StringValue referencedGroupType = 2;
  // Whether `referencedGroupType` refers to any existing `EntitySchema.name` that is maintained by Evita.
  bool referencedGroupTypeManaged = 3;
}

// Mutation is responsible for setting value to a `ReferenceSchema.referencedEntityType` in `EntitySchema`.
// Mutation can be used for altering also the existing `ReferenceSchema` alone.
message GrpcModifyReferenceSchemaRelatedEntityMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Reference to `EntitySchema.name` of the referenced entity. Might be also any `String`
  // that identifies type some external resource not maintained by Evita.
  string referencedEntityType = 2;
  // Whether `referencedEntityType` refers to any existing `EntitySchema.name` that is maintained by Evita.
  bool referencedEntityTypeManaged = 3;
}

// Mutation is responsible for setting value to a `ReflectedReferenceSchema.attributesInherited` and
// `ReflectedReferenceSchema.attributesExcludedFromInheritance` in `ReferenceSchema`.
// Mutation can be used for altering also the existing `ReferenceSchemaContract` alone.
message GrpcModifyReflectedReferenceAttributeInheritanceSchemaMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Contains true if the attributes of the reflected reference are inherited from the target reference.
  GrpcAttributeInheritanceBehavior attributeInheritanceBehavior = 2;
  // The array of attribute names that are inherited / excluded from inheritance based on the value of
  // attributeInheritanceBehavior property.
  repeated string attributeInheritanceFilter = 3;
}

// Mutation is responsible for removing an existing `ReferenceSchema` in the `EntitySchema`.
// Mutation can be used for altering also the existing `ReferenceSchema` alone.
message GrpcRemoveReferenceSchemaMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
}

// Mutation is responsible for setting value to a `ReferenceSchema.faceted in `EntitySchema`.
// Mutation can be used for altering also the existing `ReferenceSchema` alone.
message GrpcSetReferenceSchemaFacetedMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Whether the statistics data for this reference should be maintained and this allowing to get
  // `facetSummary` for this reference or use `facet_{reference name}_inSet`
  // filtering query.
  //
  // Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
  // occupies (memory/disk) space in the form of index.
  // Reference that was marked as faceted is called Facet.
  // deprecated in favor of `facetedInScopes`
  bool faceted = 2 [deprecated = true];
  // Set to true when the faceted property should be inherited from the original.
  // This property makes sense only for inherited reference attributes on reflected reference. For all other cases it
  // must be left as false. When set to TRUE the value of `faceted` field is ignored.
  bool inherited = 3;
  // Whether the statistics data for this reference should be maintained and this allowing to get
  // `facetSummary` for this reference or use `facet_{reference name}_inSet`
  // filtering query.
  //
  // Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
  // occupies (memory/disk) space in the form of index.
  // Reference that was marked as faceted is called Facet.
  repeated GrpcEntityScope facetedInScopes = 4;
}

// Mutation is responsible for setting value to a `ReferenceSchema.indexed` in `EntitySchema`.
// Mutation can be used for altering also the existing `ReferenceSchema` alone.
message GrpcSetReferenceSchemaIndexedMutation {
  // Name of the reference the mutation is targeting.
  string name = 1;
  // Set to true when the filterable property should be inherited from the original.
  // This property makes sense only for inherited reference attributes on reflected reference. For all other cases it
  // must be left as false. When set to TRUE the value of `filterable` field is ignored.
  bool inherited = 2;
  // Whether the index for this reference should be created and maintained allowing to filter by
  // `referenceHaving` filtering constraints. Index is also required when reference is `faceted`.
  //
  // Do not mark reference as faceted unless you know that you'll need to filter / sort entities by this reference.
  // Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
  // the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
  // alongside other references if requested.
  // deprecated in favor of `scopedIndexTypes`
  repeated GrpcEntityScope indexedInScopes = 3 [deprecated = true];
  // Scoped reference index types that define both the scope and the type of index for the reference.
  // This replaces the deprecated `indexedInScopes` field with more granular control over indexing.
  // When `inherited` is true, this field is ignored.
  repeated GrpcScopedReferenceIndexType scopedIndexTypes = 4;
}
