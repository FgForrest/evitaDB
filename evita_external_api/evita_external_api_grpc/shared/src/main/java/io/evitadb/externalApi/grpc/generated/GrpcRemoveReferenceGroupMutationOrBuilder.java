/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2025
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcReferenceMutations.proto

package io.evitadb.externalApi.grpc.generated;

public interface GrpcRemoveReferenceGroupMutationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.evitadb.externalApi.grpc.generated.GrpcRemoveReferenceGroupMutation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique identifier of the reference.
   * </pre>
   *
   * <code>string referenceName = 1;</code>
   * @return The referenceName.
   */
  java.lang.String getReferenceName();
  /**
   * <pre>
   * Unique identifier of the reference.
   * </pre>
   *
   * <code>string referenceName = 1;</code>
   * @return The bytes for referenceName.
   */
  com.google.protobuf.ByteString
      getReferenceNameBytes();

  /**
   * <pre>
   * Primary key of the referenced entity. Might be also any integer that uniquely identifies some external
   * resource not maintained by Evita.
   * </pre>
   *
   * <code>int32 referencePrimaryKey = 2;</code>
   * @return The referencePrimaryKey.
   */
  int getReferencePrimaryKey();

  /**
   * <pre>
   * internal PK is assigned by evitaDB engine and is used to uniquely identify the
   * reference among other references. It is used when multiple references share same
   * business key - entityType and primaryKey - but differ by other properties (fe. reference group or attributes).
   * When a reference is created for the first time, internal id is set to a unique
   * negative number that is not used by the server side, which assigns positive unique
   * numbers to the references on first reference persistence. This allows distinguishing
   * references that are not yet persisted from those that are already persistent.
   * When standalone key is used:
   * - negative number: means that the reference is new and hasn't been yet persisted
   * - zero: means we don't know the internal PK
   * - positive number: means that the reference is persistent and has been already stored
   *   in the database
   * </pre>
   *
   * <code>int32 internalPrimaryKey = 3;</code>
   * @return The internalPrimaryKey.
   */
  int getInternalPrimaryKey();
}
