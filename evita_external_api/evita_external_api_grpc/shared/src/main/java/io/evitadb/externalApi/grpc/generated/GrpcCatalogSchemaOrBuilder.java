/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2024
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcCatalogSchema.proto

package io.evitadb.externalApi.grpc.generated;

public interface GrpcCatalogSchemaOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.evitadb.externalApi.grpc.generated.GrpcCatalogSchema)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Contains unique name of the catalog. Case-sensitive. Distinguishes one catalog item from another
   * within single entity instance.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Contains unique name of the catalog. Case-sensitive. Distinguishes one catalog item from another
   * within single entity instance.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Contains version of this catalog schema and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   * </pre>
   *
   * <code>int32 version = 2;</code>
   * @return The version.
   */
  int getVersion();

  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 3;</code>
   * @return Whether the description field is set.
   */
  boolean hasDescription();
  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 3;</code>
   * @return The description.
   */
  com.google.protobuf.StringValue getDescription();
  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 3;</code>
   */
  com.google.protobuf.StringValueOrBuilder getDescriptionOrBuilder();

  /**
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode catalogEvolutionMode = 4;</code>
   * @return A list containing the catalogEvolutionMode.
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode> getCatalogEvolutionModeList();
  /**
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode catalogEvolutionMode = 4;</code>
   * @return The count of catalogEvolutionMode.
   */
  int getCatalogEvolutionModeCount();
  /**
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode catalogEvolutionMode = 4;</code>
   * @param index The index of the element to return.
   * @return The catalogEvolutionMode at the given index.
   */
  io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode getCatalogEvolutionMode(int index);
  /**
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode catalogEvolutionMode = 4;</code>
   * @return A list containing the enum numeric values on the wire for catalogEvolutionMode.
   */
  java.util.List<java.lang.Integer>
  getCatalogEvolutionModeValueList();
  /**
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode catalogEvolutionMode = 4;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of catalogEvolutionMode at the given index.
   */
  int getCatalogEvolutionModeValue(int index);

  /**
   * <pre>
   * Contains index of generally (catalog-wide) shared `AttributeSchema` that could be used as attributes of any
   * entity type that refers them. These attributes cannot be changed from within the entity schema. Entity schemas
   * will not be able to define their own attribute of same name that would clash with the global one (they may only
   * reference the attributes with the same name from the catalog schema).
   * There may be entities that won't take advantage of certain global attributes (i.e. it's not guaranteed that all
   * entity types in catalog have all global attributes).
   * The "catalog-wide" unique attributes allows Evita to fetch entity of any (and up-front unknown) entity type by
   * some unique attribute value - usually URL.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema&gt; attributes = 5;</code>
   */
  int getAttributesCount();
  /**
   * <pre>
   * Contains index of generally (catalog-wide) shared `AttributeSchema` that could be used as attributes of any
   * entity type that refers them. These attributes cannot be changed from within the entity schema. Entity schemas
   * will not be able to define their own attribute of same name that would clash with the global one (they may only
   * reference the attributes with the same name from the catalog schema).
   * There may be entities that won't take advantage of certain global attributes (i.e. it's not guaranteed that all
   * entity types in catalog have all global attributes).
   * The "catalog-wide" unique attributes allows Evita to fetch entity of any (and up-front unknown) entity type by
   * some unique attribute value - usually URL.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema&gt; attributes = 5;</code>
   */
  boolean containsAttributes(
      java.lang.String key);
  /**
   * Use {@link #getAttributesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema>
  getAttributes();
  /**
   * <pre>
   * Contains index of generally (catalog-wide) shared `AttributeSchema` that could be used as attributes of any
   * entity type that refers them. These attributes cannot be changed from within the entity schema. Entity schemas
   * will not be able to define their own attribute of same name that would clash with the global one (they may only
   * reference the attributes with the same name from the catalog schema).
   * There may be entities that won't take advantage of certain global attributes (i.e. it's not guaranteed that all
   * entity types in catalog have all global attributes).
   * The "catalog-wide" unique attributes allows Evita to fetch entity of any (and up-front unknown) entity type by
   * some unique attribute value - usually URL.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema&gt; attributes = 5;</code>
   */
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema>
  getAttributesMap();
  /**
   * <pre>
   * Contains index of generally (catalog-wide) shared `AttributeSchema` that could be used as attributes of any
   * entity type that refers them. These attributes cannot be changed from within the entity schema. Entity schemas
   * will not be able to define their own attribute of same name that would clash with the global one (they may only
   * reference the attributes with the same name from the catalog schema).
   * There may be entities that won't take advantage of certain global attributes (i.e. it's not guaranteed that all
   * entity types in catalog have all global attributes).
   * The "catalog-wide" unique attributes allows Evita to fetch entity of any (and up-front unknown) entity type by
   * some unique attribute value - usually URL.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema&gt; attributes = 5;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema getAttributesOrDefault(
      java.lang.String key,
      io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema defaultValue);
  /**
   * <pre>
   * Contains index of generally (catalog-wide) shared `AttributeSchema` that could be used as attributes of any
   * entity type that refers them. These attributes cannot be changed from within the entity schema. Entity schemas
   * will not be able to define their own attribute of same name that would clash with the global one (they may only
   * reference the attributes with the same name from the catalog schema).
   * There may be entities that won't take advantage of certain global attributes (i.e. it's not guaranteed that all
   * entity types in catalog have all global attributes).
   * The "catalog-wide" unique attributes allows Evita to fetch entity of any (and up-front unknown) entity type by
   * some unique attribute value - usually URL.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema&gt; attributes = 5;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeSchema getAttributesOrThrow(
      java.lang.String key);
}
