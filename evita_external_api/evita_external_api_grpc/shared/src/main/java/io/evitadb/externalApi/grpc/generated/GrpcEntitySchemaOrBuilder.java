/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2025
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcEntitySchema.proto

package io.evitadb.externalApi.grpc.generated;

public interface GrpcEntitySchemaOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.evitadb.externalApi.grpc.generated.GrpcEntitySchema)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Contains unique name of the model. Case-sensitive. Distinguishes one model item from another
   * within single entity instance.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Contains unique name of the model. Case-sensitive. Distinguishes one model item from another
   * within single entity instance.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Contains version of this entity schema and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   * </pre>
   *
   * <code>int32 version = 2;</code>
   * @return The version.
   */
  int getVersion();

  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 3;</code>
   * @return Whether the description field is set.
   */
  boolean hasDescription();
  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 3;</code>
   * @return The description.
   */
  com.google.protobuf.StringValue getDescription();
  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 3;</code>
   */
  com.google.protobuf.StringValueOrBuilder getDescriptionOrBuilder();

  /**
   * <pre>
   * Deprecation notice contains information about planned removal of this entity from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   * If notice is `null`, this schema is considered not deprecated.
   * </pre>
   *
   * <code>.google.protobuf.StringValue deprecationNotice = 4;</code>
   * @return Whether the deprecationNotice field is set.
   */
  boolean hasDeprecationNotice();
  /**
   * <pre>
   * Deprecation notice contains information about planned removal of this entity from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   * If notice is `null`, this schema is considered not deprecated.
   * </pre>
   *
   * <code>.google.protobuf.StringValue deprecationNotice = 4;</code>
   * @return The deprecationNotice.
   */
  com.google.protobuf.StringValue getDeprecationNotice();
  /**
   * <pre>
   * Deprecation notice contains information about planned removal of this entity from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   * If notice is `null`, this schema is considered not deprecated.
   * </pre>
   *
   * <code>.google.protobuf.StringValue deprecationNotice = 4;</code>
   */
  com.google.protobuf.StringValueOrBuilder getDeprecationNoticeOrBuilder();

  /**
   * <pre>
   * Contains `true` when primary keys of entities of this type will not be provided by the external systems and Evita
   * is responsible for generating unique primary keys for the entity on insertion.
   * Generated key is guaranteed to be unique, but may not represent continuous ascending series. Generated key
   * will be always greater than zero.
   * </pre>
   *
   * <code>bool withGeneratedPrimaryKey = 5;</code>
   * @return The withGeneratedPrimaryKey.
   */
  boolean getWithGeneratedPrimaryKey();

  /**
   * <pre>
   * Contains `true` when entities of this type are organized in a tree like structure (hierarchy) where certain entities
   * are subordinate of other entities.
   * Entities may be organized in hierarchical fashion. That means that entity may refer to single parent entity and may be
   * referred by multiple child entities. Hierarchy is always composed of entities of same type.
   * Each entity must be part of at most single hierarchy (tree).
   * Hierarchy can limit returned entities by using filtering constraints. It's also used for
   * computation of extra data - such as `hierarchyParentsOfSelf`. It can also invert type of returned entities in case extra result
   * `hierarchyOfSelf` is requested.
   * </pre>
   *
   * <code>bool withHierarchy = 6;</code>
   * @return The withHierarchy.
   */
  boolean getWithHierarchy();

  /**
   * <pre>
   * Contains `true` when entities of this type holds price information.
   * Prices are specific to a very few entities, but because correct price computation is very complex in e-commerce
   * systems and highly affects performance of the entities filtering and sorting, they deserve first class support
   * in entity model. It is pretty common in B2B systems single product has assigned dozens of prices for the different
   * customers.
   * Specifying prices on entity allows usage of `priceValidIn`, `priceInCurrency`
   * `priceBetween`, and `priceInPriceLists` filtering constraints and also `priceNatural`,
   * ordering of the entities. Additional extra result
   * `priceHistogram` and requirement `priceType` can be used in query as well.
   * </pre>
   *
   * <code>bool withPrice = 7;</code>
   * @return The withPrice.
   */
  boolean getWithPrice();

  /**
   * <pre>
   * Determines how many fractional places are important when entities are compared during filtering or sorting. It is
   * important to know that all prices will be converted to `Int`, so any of the price values
   * (either with or without tax) must not ever exceed maximum limits of `Int` type when scaling
   * the number by the power of ten using `indexedPricePlaces` as exponent.
   * </pre>
   *
   * <code>int32 indexedPricePlaces = 8;</code>
   * @return The indexedPricePlaces.
   */
  int getIndexedPricePlaces();

  /**
   * <pre>
   * Contains set of all `Locale` that could be used for localized `AttributeSchema` or `AssociatedDataSchema`.
   * Enables using `entityLocaleEquals` filtering constraint in query.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcLocale locales = 9;</code>
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcLocale>
      getLocalesList();
  /**
   * <pre>
   * Contains set of all `Locale` that could be used for localized `AttributeSchema` or `AssociatedDataSchema`.
   * Enables using `entityLocaleEquals` filtering constraint in query.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcLocale locales = 9;</code>
   */
  io.evitadb.externalApi.grpc.generated.GrpcLocale getLocales(int index);
  /**
   * <pre>
   * Contains set of all `Locale` that could be used for localized `AttributeSchema` or `AssociatedDataSchema`.
   * Enables using `entityLocaleEquals` filtering constraint in query.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcLocale locales = 9;</code>
   */
  int getLocalesCount();
  /**
   * <pre>
   * Contains set of all `Locale` that could be used for localized `AttributeSchema` or `AssociatedDataSchema`.
   * Enables using `entityLocaleEquals` filtering constraint in query.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcLocale locales = 9;</code>
   */
  java.util.List<? extends io.evitadb.externalApi.grpc.generated.GrpcLocaleOrBuilder>
      getLocalesOrBuilderList();
  /**
   * <pre>
   * Contains set of all `Locale` that could be used for localized `AttributeSchema` or `AssociatedDataSchema`.
   * Enables using `entityLocaleEquals` filtering constraint in query.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcLocale locales = 9;</code>
   */
  io.evitadb.externalApi.grpc.generated.GrpcLocaleOrBuilder getLocalesOrBuilder(
      int index);

  /**
   * <pre>
   * Contains set of all `Currency` that could be used for `prices` in entities of this type.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCurrency currencies = 10;</code>
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcCurrency>
      getCurrenciesList();
  /**
   * <pre>
   * Contains set of all `Currency` that could be used for `prices` in entities of this type.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCurrency currencies = 10;</code>
   */
  io.evitadb.externalApi.grpc.generated.GrpcCurrency getCurrencies(int index);
  /**
   * <pre>
   * Contains set of all `Currency` that could be used for `prices` in entities of this type.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCurrency currencies = 10;</code>
   */
  int getCurrenciesCount();
  /**
   * <pre>
   * Contains set of all `Currency` that could be used for `prices` in entities of this type.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCurrency currencies = 10;</code>
   */
  java.util.List<? extends io.evitadb.externalApi.grpc.generated.GrpcCurrencyOrBuilder>
      getCurrenciesOrBuilderList();
  /**
   * <pre>
   * Contains set of all `Currency` that could be used for `prices` in entities of this type.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcCurrency currencies = 10;</code>
   */
  io.evitadb.externalApi.grpc.generated.GrpcCurrencyOrBuilder getCurrenciesOrBuilder(
      int index);

  /**
   * <pre>
   * Contains index of all `AttributeSchema` that could be used as attributes of entity of this type.
   * Entity (global) attributes allows defining set of data that are fetched in bulk along with the entity body.
   * Attributes may be indexed for fast filtering (`AttributeSchema.filterable`) or can be used to sort along
   * (`AttributeSchema.sortable`). Attributes are not automatically indexed in order not to waste precious
   * memory space for data that will never be used in search queries.
   * Filtering in attributes is executed by using constraints like `and`,
   * `not`, `attributeEquals`, `attributeContains`
   * and many others. Sorting can be achieved with `attributeNatural` or others.
   * Attributes are not recommended for bigger data as they are all loaded at once requested.
   * Large data that are occasionally used store in `associatedData`.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema&gt; attributes = 11;</code>
   */
  int getAttributesCount();
  /**
   * <pre>
   * Contains index of all `AttributeSchema` that could be used as attributes of entity of this type.
   * Entity (global) attributes allows defining set of data that are fetched in bulk along with the entity body.
   * Attributes may be indexed for fast filtering (`AttributeSchema.filterable`) or can be used to sort along
   * (`AttributeSchema.sortable`). Attributes are not automatically indexed in order not to waste precious
   * memory space for data that will never be used in search queries.
   * Filtering in attributes is executed by using constraints like `and`,
   * `not`, `attributeEquals`, `attributeContains`
   * and many others. Sorting can be achieved with `attributeNatural` or others.
   * Attributes are not recommended for bigger data as they are all loaded at once requested.
   * Large data that are occasionally used store in `associatedData`.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema&gt; attributes = 11;</code>
   */
  boolean containsAttributes(
      java.lang.String key);
  /**
   * Use {@link #getAttributesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema>
  getAttributes();
  /**
   * <pre>
   * Contains index of all `AttributeSchema` that could be used as attributes of entity of this type.
   * Entity (global) attributes allows defining set of data that are fetched in bulk along with the entity body.
   * Attributes may be indexed for fast filtering (`AttributeSchema.filterable`) or can be used to sort along
   * (`AttributeSchema.sortable`). Attributes are not automatically indexed in order not to waste precious
   * memory space for data that will never be used in search queries.
   * Filtering in attributes is executed by using constraints like `and`,
   * `not`, `attributeEquals`, `attributeContains`
   * and many others. Sorting can be achieved with `attributeNatural` or others.
   * Attributes are not recommended for bigger data as they are all loaded at once requested.
   * Large data that are occasionally used store in `associatedData`.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema&gt; attributes = 11;</code>
   */
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema>
  getAttributesMap();
  /**
   * <pre>
   * Contains index of all `AttributeSchema` that could be used as attributes of entity of this type.
   * Entity (global) attributes allows defining set of data that are fetched in bulk along with the entity body.
   * Attributes may be indexed for fast filtering (`AttributeSchema.filterable`) or can be used to sort along
   * (`AttributeSchema.sortable`). Attributes are not automatically indexed in order not to waste precious
   * memory space for data that will never be used in search queries.
   * Filtering in attributes is executed by using constraints like `and`,
   * `not`, `attributeEquals`, `attributeContains`
   * and many others. Sorting can be achieved with `attributeNatural` or others.
   * Attributes are not recommended for bigger data as they are all loaded at once requested.
   * Large data that are occasionally used store in `associatedData`.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema&gt; attributes = 11;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema getAttributesOrDefault(
      java.lang.String key,
      io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema defaultValue);
  /**
   * <pre>
   * Contains index of all `AttributeSchema` that could be used as attributes of entity of this type.
   * Entity (global) attributes allows defining set of data that are fetched in bulk along with the entity body.
   * Attributes may be indexed for fast filtering (`AttributeSchema.filterable`) or can be used to sort along
   * (`AttributeSchema.sortable`). Attributes are not automatically indexed in order not to waste precious
   * memory space for data that will never be used in search queries.
   * Filtering in attributes is executed by using constraints like `and`,
   * `not`, `attributeEquals`, `attributeContains`
   * and many others. Sorting can be achieved with `attributeNatural` or others.
   * Attributes are not recommended for bigger data as they are all loaded at once requested.
   * Large data that are occasionally used store in `associatedData`.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema&gt; attributes = 11;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcAttributeSchema getAttributesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Contains index of all `AssociatedDataSchema` that could be used as associated data of entity of this type.
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   * The search query must contain specific associated data fields in order
   * associated data are fetched along with the entity. Associated data are stored and fetched separately by their name.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema&gt; associatedData = 12;</code>
   */
  int getAssociatedDataCount();
  /**
   * <pre>
   * Contains index of all `AssociatedDataSchema` that could be used as associated data of entity of this type.
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   * The search query must contain specific associated data fields in order
   * associated data are fetched along with the entity. Associated data are stored and fetched separately by their name.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema&gt; associatedData = 12;</code>
   */
  boolean containsAssociatedData(
      java.lang.String key);
  /**
   * Use {@link #getAssociatedDataMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema>
  getAssociatedData();
  /**
   * <pre>
   * Contains index of all `AssociatedDataSchema` that could be used as associated data of entity of this type.
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   * The search query must contain specific associated data fields in order
   * associated data are fetched along with the entity. Associated data are stored and fetched separately by their name.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema&gt; associatedData = 12;</code>
   */
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema>
  getAssociatedDataMap();
  /**
   * <pre>
   * Contains index of all `AssociatedDataSchema` that could be used as associated data of entity of this type.
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   * The search query must contain specific associated data fields in order
   * associated data are fetched along with the entity. Associated data are stored and fetched separately by their name.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema&gt; associatedData = 12;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema getAssociatedDataOrDefault(
      java.lang.String key,
      io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema defaultValue);
  /**
   * <pre>
   * Contains index of all `AssociatedDataSchema` that could be used as associated data of entity of this type.
   * Associated data carry additional data entries that are never used for filtering / sorting but may be needed to be fetched
   * along with entity in order to present data to the target consumer (i.e. user / API / bot). Associated data may be stored
   * in slower storage and may contain wide range of data types - from small ones (i.e. numbers, strings, dates) up to large
   * binary arrays representing entire files (i.e. pictures, documents).
   * The search query must contain specific associated data fields in order
   * associated data are fetched along with the entity. Associated data are stored and fetched separately by their name.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema&gt; associatedData = 12;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcAssociatedDataSchema getAssociatedDataOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Contains index of all `ReferenceSchema` that could be used as references of entity of this type.
   * References refer to other entities (of same or different entity type).
   * Allows entity filtering (but not sorting) of the entities by using `facetInSet` constraint
   * and statistics computation when `facetStatistics` extra result is requested. Reference
   * is uniquely represented by int positive number (max. (2^63)-1) and entity type and can be
   * part of multiple reference groups, that are also represented by int and entity type.
   * Reference id in one entity is unique and belongs to single reference group id. Among multiple entities reference may be part
   * of different reference groups. Referenced entity type may represent type of another Evita entity or may refer
   * to anything unknown to Evita that posses unique int key and is maintained by external systems (fe. tag assignment,
   * group assignment, category assignment, stock assignment and so on). Not all these data needs to be present in
   * Evita.
   * References may carry additional key-value data linked to this entity relation (fe. item count present on certain stock).
   * The search query must contain specific `referenceContent` requirement in order
   * references are fetched along with the entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema&gt; references = 13;</code>
   */
  int getReferencesCount();
  /**
   * <pre>
   * Contains index of all `ReferenceSchema` that could be used as references of entity of this type.
   * References refer to other entities (of same or different entity type).
   * Allows entity filtering (but not sorting) of the entities by using `facetInSet` constraint
   * and statistics computation when `facetStatistics` extra result is requested. Reference
   * is uniquely represented by int positive number (max. (2^63)-1) and entity type and can be
   * part of multiple reference groups, that are also represented by int and entity type.
   * Reference id in one entity is unique and belongs to single reference group id. Among multiple entities reference may be part
   * of different reference groups. Referenced entity type may represent type of another Evita entity or may refer
   * to anything unknown to Evita that posses unique int key and is maintained by external systems (fe. tag assignment,
   * group assignment, category assignment, stock assignment and so on). Not all these data needs to be present in
   * Evita.
   * References may carry additional key-value data linked to this entity relation (fe. item count present on certain stock).
   * The search query must contain specific `referenceContent` requirement in order
   * references are fetched along with the entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema&gt; references = 13;</code>
   */
  boolean containsReferences(
      java.lang.String key);
  /**
   * Use {@link #getReferencesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema>
  getReferences();
  /**
   * <pre>
   * Contains index of all `ReferenceSchema` that could be used as references of entity of this type.
   * References refer to other entities (of same or different entity type).
   * Allows entity filtering (but not sorting) of the entities by using `facetInSet` constraint
   * and statistics computation when `facetStatistics` extra result is requested. Reference
   * is uniquely represented by int positive number (max. (2^63)-1) and entity type and can be
   * part of multiple reference groups, that are also represented by int and entity type.
   * Reference id in one entity is unique and belongs to single reference group id. Among multiple entities reference may be part
   * of different reference groups. Referenced entity type may represent type of another Evita entity or may refer
   * to anything unknown to Evita that posses unique int key and is maintained by external systems (fe. tag assignment,
   * group assignment, category assignment, stock assignment and so on). Not all these data needs to be present in
   * Evita.
   * References may carry additional key-value data linked to this entity relation (fe. item count present on certain stock).
   * The search query must contain specific `referenceContent` requirement in order
   * references are fetched along with the entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema&gt; references = 13;</code>
   */
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema>
  getReferencesMap();
  /**
   * <pre>
   * Contains index of all `ReferenceSchema` that could be used as references of entity of this type.
   * References refer to other entities (of same or different entity type).
   * Allows entity filtering (but not sorting) of the entities by using `facetInSet` constraint
   * and statistics computation when `facetStatistics` extra result is requested. Reference
   * is uniquely represented by int positive number (max. (2^63)-1) and entity type and can be
   * part of multiple reference groups, that are also represented by int and entity type.
   * Reference id in one entity is unique and belongs to single reference group id. Among multiple entities reference may be part
   * of different reference groups. Referenced entity type may represent type of another Evita entity or may refer
   * to anything unknown to Evita that posses unique int key and is maintained by external systems (fe. tag assignment,
   * group assignment, category assignment, stock assignment and so on). Not all these data needs to be present in
   * Evita.
   * References may carry additional key-value data linked to this entity relation (fe. item count present on certain stock).
   * The search query must contain specific `referenceContent` requirement in order
   * references are fetched along with the entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema&gt; references = 13;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema getReferencesOrDefault(
      java.lang.String key,
      io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema defaultValue);
  /**
   * <pre>
   * Contains index of all `ReferenceSchema` that could be used as references of entity of this type.
   * References refer to other entities (of same or different entity type).
   * Allows entity filtering (but not sorting) of the entities by using `facetInSet` constraint
   * and statistics computation when `facetStatistics` extra result is requested. Reference
   * is uniquely represented by int positive number (max. (2^63)-1) and entity type and can be
   * part of multiple reference groups, that are also represented by int and entity type.
   * Reference id in one entity is unique and belongs to single reference group id. Among multiple entities reference may be part
   * of different reference groups. Referenced entity type may represent type of another Evita entity or may refer
   * to anything unknown to Evita that posses unique int key and is maintained by external systems (fe. tag assignment,
   * group assignment, category assignment, stock assignment and so on). Not all these data needs to be present in
   * Evita.
   * References may carry additional key-value data linked to this entity relation (fe. item count present on certain stock).
   * The search query must contain specific `referenceContent` requirement in order
   * references are fetched along with the entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema&gt; references = 13;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcReferenceSchema getReferencesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Evolution mode allows to specify how strict is evitaDB when unknown information is presented to her for the first
   * time. When no evolution mode is set, each violation of the `EntitySchema` is
   * reported by an exception. This behaviour can be changed by this evolution mode however.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEvolutionMode evolutionMode = 14;</code>
   * @return A list containing the evolutionMode.
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcEvolutionMode> getEvolutionModeList();
  /**
   * <pre>
   * Evolution mode allows to specify how strict is evitaDB when unknown information is presented to her for the first
   * time. When no evolution mode is set, each violation of the `EntitySchema` is
   * reported by an exception. This behaviour can be changed by this evolution mode however.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEvolutionMode evolutionMode = 14;</code>
   * @return The count of evolutionMode.
   */
  int getEvolutionModeCount();
  /**
   * <pre>
   * Evolution mode allows to specify how strict is evitaDB when unknown information is presented to her for the first
   * time. When no evolution mode is set, each violation of the `EntitySchema` is
   * reported by an exception. This behaviour can be changed by this evolution mode however.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEvolutionMode evolutionMode = 14;</code>
   * @param index The index of the element to return.
   * @return The evolutionMode at the given index.
   */
  io.evitadb.externalApi.grpc.generated.GrpcEvolutionMode getEvolutionMode(int index);
  /**
   * <pre>
   * Evolution mode allows to specify how strict is evitaDB when unknown information is presented to her for the first
   * time. When no evolution mode is set, each violation of the `EntitySchema` is
   * reported by an exception. This behaviour can be changed by this evolution mode however.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEvolutionMode evolutionMode = 14;</code>
   * @return A list containing the enum numeric values on the wire for evolutionMode.
   */
  java.util.List<java.lang.Integer>
  getEvolutionModeValueList();
  /**
   * <pre>
   * Evolution mode allows to specify how strict is evitaDB when unknown information is presented to her for the first
   * time. When no evolution mode is set, each violation of the `EntitySchema` is
   * reported by an exception. This behaviour can be changed by this evolution mode however.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEvolutionMode evolutionMode = 14;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of evolutionMode at the given index.
   */
  int getEvolutionModeValue(int index);

  /**
   * <pre>
   * Contains index of definitions of all sortable attribute compounds defined in this schema.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema&gt; sortableAttributeCompounds = 15;</code>
   */
  int getSortableAttributeCompoundsCount();
  /**
   * <pre>
   * Contains index of definitions of all sortable attribute compounds defined in this schema.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema&gt; sortableAttributeCompounds = 15;</code>
   */
  boolean containsSortableAttributeCompounds(
      java.lang.String key);
  /**
   * Use {@link #getSortableAttributeCompoundsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema>
  getSortableAttributeCompounds();
  /**
   * <pre>
   * Contains index of definitions of all sortable attribute compounds defined in this schema.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema&gt; sortableAttributeCompounds = 15;</code>
   */
  java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema>
  getSortableAttributeCompoundsMap();
  /**
   * <pre>
   * Contains index of definitions of all sortable attribute compounds defined in this schema.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema&gt; sortableAttributeCompounds = 15;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema getSortableAttributeCompoundsOrDefault(
      java.lang.String key,
      io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema defaultValue);
  /**
   * <pre>
   * Contains index of definitions of all sortable attribute compounds defined in this schema.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema&gt; sortableAttributeCompounds = 15;</code>
   */

  io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchema getSortableAttributeCompoundsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Contains entity type converted to different naming conventions.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcNameVariant nameVariant = 16;</code>
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcNameVariant>
      getNameVariantList();
  /**
   * <pre>
   * Contains entity type converted to different naming conventions.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcNameVariant nameVariant = 16;</code>
   */
  io.evitadb.externalApi.grpc.generated.GrpcNameVariant getNameVariant(int index);
  /**
   * <pre>
   * Contains entity type converted to different naming conventions.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcNameVariant nameVariant = 16;</code>
   */
  int getNameVariantCount();
  /**
   * <pre>
   * Contains entity type converted to different naming conventions.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcNameVariant nameVariant = 16;</code>
   */
  java.util.List<? extends io.evitadb.externalApi.grpc.generated.GrpcNameVariantOrBuilder>
      getNameVariantOrBuilderList();
  /**
   * <pre>
   * Contains entity type converted to different naming conventions.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcNameVariant nameVariant = 16;</code>
   */
  io.evitadb.externalApi.grpc.generated.GrpcNameVariantOrBuilder getNameVariantOrBuilder(
      int index);

  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope hierarchyIndexedInScopes = 17;</code>
   * @return A list containing the hierarchyIndexedInScopes.
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcEntityScope> getHierarchyIndexedInScopesList();
  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope hierarchyIndexedInScopes = 17;</code>
   * @return The count of hierarchyIndexedInScopes.
   */
  int getHierarchyIndexedInScopesCount();
  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope hierarchyIndexedInScopes = 17;</code>
   * @param index The index of the element to return.
   * @return The hierarchyIndexedInScopes at the given index.
   */
  io.evitadb.externalApi.grpc.generated.GrpcEntityScope getHierarchyIndexedInScopes(int index);
  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope hierarchyIndexedInScopes = 17;</code>
   * @return A list containing the enum numeric values on the wire for hierarchyIndexedInScopes.
   */
  java.util.List<java.lang.Integer>
  getHierarchyIndexedInScopesValueList();
  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope hierarchyIndexedInScopes = 17;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of hierarchyIndexedInScopes at the given index.
   */
  int getHierarchyIndexedInScopesValue(int index);

  /**
   * <pre>
   * Contains set of all scopes the price information is indexed in and can be used for filtering entities and computation
   * of extra data. If the price information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its price), but it is not possible to work with the price information in any other way (calculating
   * price histogram, filtering, sorting by price, etc.).
   * Prices can be also set as non-indexed individually by setting {&#64;link PriceContract#indexed()} to false.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope priceIndexedInScopes = 18;</code>
   * @return A list containing the priceIndexedInScopes.
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcEntityScope> getPriceIndexedInScopesList();
  /**
   * <pre>
   * Contains set of all scopes the price information is indexed in and can be used for filtering entities and computation
   * of extra data. If the price information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its price), but it is not possible to work with the price information in any other way (calculating
   * price histogram, filtering, sorting by price, etc.).
   * Prices can be also set as non-indexed individually by setting {&#64;link PriceContract#indexed()} to false.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope priceIndexedInScopes = 18;</code>
   * @return The count of priceIndexedInScopes.
   */
  int getPriceIndexedInScopesCount();
  /**
   * <pre>
   * Contains set of all scopes the price information is indexed in and can be used for filtering entities and computation
   * of extra data. If the price information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its price), but it is not possible to work with the price information in any other way (calculating
   * price histogram, filtering, sorting by price, etc.).
   * Prices can be also set as non-indexed individually by setting {&#64;link PriceContract#indexed()} to false.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope priceIndexedInScopes = 18;</code>
   * @param index The index of the element to return.
   * @return The priceIndexedInScopes at the given index.
   */
  io.evitadb.externalApi.grpc.generated.GrpcEntityScope getPriceIndexedInScopes(int index);
  /**
   * <pre>
   * Contains set of all scopes the price information is indexed in and can be used for filtering entities and computation
   * of extra data. If the price information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its price), but it is not possible to work with the price information in any other way (calculating
   * price histogram, filtering, sorting by price, etc.).
   * Prices can be also set as non-indexed individually by setting {&#64;link PriceContract#indexed()} to false.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope priceIndexedInScopes = 18;</code>
   * @return A list containing the enum numeric values on the wire for priceIndexedInScopes.
   */
  java.util.List<java.lang.Integer>
  getPriceIndexedInScopesValueList();
  /**
   * <pre>
   * Contains set of all scopes the price information is indexed in and can be used for filtering entities and computation
   * of extra data. If the price information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its price), but it is not possible to work with the price information in any other way (calculating
   * price histogram, filtering, sorting by price, etc.).
   * Prices can be also set as non-indexed individually by setting {&#64;link PriceContract#indexed()} to false.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope priceIndexedInScopes = 18;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of priceIndexedInScopes at the given index.
   */
  int getPriceIndexedInScopesValue(int index);
}
