/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2025
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcEntitySchemaMutations.proto

// Protobuf Java Version: 3.25.8
package io.evitadb.externalApi.grpc.generated;

public interface GrpcSetEntitySchemaWithHierarchyMutationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.evitadb.externalApi.grpc.generated.GrpcSetEntitySchemaWithHierarchyMutation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Whether entities of this type are organized in a tree like structure (hierarchy) where certain entities
   * are subordinate of other entities.
   *
   * Entities may be organized in hierarchical fashion. That means that entity may refer to single parent entity and may be
   * referred by multiple child entities. Hierarchy is always composed of entities of same type.
   * Each entity must be part of at most single hierarchy (tree).
   *
   * Hierarchy can limit returned entities by using filtering constraints `hierarchy_{reference name}_within`. It's also used for
   * computation of extra data - such as `hierarchyParents`.
   * </pre>
   *
   * <code>bool withHierarchy = 1;</code>
   * @return The withHierarchy.
   */
  boolean getWithHierarchy();

  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 2;</code>
   * @return A list containing the indexedInScopes.
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcEntityScope> getIndexedInScopesList();
  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 2;</code>
   * @return The count of indexedInScopes.
   */
  int getIndexedInScopesCount();
  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 2;</code>
   * @param index The index of the element to return.
   * @return The indexedInScopes at the given index.
   */
  io.evitadb.externalApi.grpc.generated.GrpcEntityScope getIndexedInScopes(int index);
  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 2;</code>
   * @return A list containing the enum numeric values on the wire for indexedInScopes.
   */
  java.util.List<java.lang.Integer>
  getIndexedInScopesValueList();
  /**
   * <pre>
   * Contains set of all scopes the entity is indexed in and can be used for filtering entities and computation of
   * extra data. If the hierarchy information is not indexed, it is still available on the entity itself (i.e. entity
   * can define its parent entity), but it is not possible to work with the hierarchy information in any other way
   * (calculating parent chain, children, siblings, etc.).
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 2;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of indexedInScopes at the given index.
   */
  int getIndexedInScopesValue(int index);
}
