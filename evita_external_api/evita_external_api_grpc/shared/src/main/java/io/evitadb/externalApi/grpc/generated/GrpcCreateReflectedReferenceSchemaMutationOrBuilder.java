/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2025
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcReferenceSchemaMutations.proto

package io.evitadb.externalApi.grpc.generated;

public interface GrpcCreateReflectedReferenceSchemaMutationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.evitadb.externalApi.grpc.generated.GrpcCreateReflectedReferenceSchemaMutation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Name of the reference the mutation is targeting.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Name of the reference the mutation is targeting.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 2;</code>
   * @return Whether the description field is set.
   */
  boolean hasDescription();
  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 2;</code>
   * @return The description.
   */
  com.google.protobuf.StringValue getDescription();
  /**
   * <pre>
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   * </pre>
   *
   * <code>.google.protobuf.StringValue description = 2;</code>
   */
  com.google.protobuf.StringValueOrBuilder getDescriptionOrBuilder();

  /**
   * <pre>
   * Deprecation notice contains information about planned removal of this schema from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   * </pre>
   *
   * <code>.google.protobuf.StringValue deprecationNotice = 3;</code>
   * @return Whether the deprecationNotice field is set.
   */
  boolean hasDeprecationNotice();
  /**
   * <pre>
   * Deprecation notice contains information about planned removal of this schema from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   * </pre>
   *
   * <code>.google.protobuf.StringValue deprecationNotice = 3;</code>
   * @return The deprecationNotice.
   */
  com.google.protobuf.StringValue getDeprecationNotice();
  /**
   * <pre>
   * Deprecation notice contains information about planned removal of this schema from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   * </pre>
   *
   * <code>.google.protobuf.StringValue deprecationNotice = 3;</code>
   */
  com.google.protobuf.StringValueOrBuilder getDeprecationNoticeOrBuilder();

  /**
   * <pre>
   * Cardinality describes the expected count of relations of this type. In evitaDB we define only one-way
   * relationship from the perspective of the entity. We stick to the ERD modelling
   * [standards](https://www.gleek.io/blog/crows-foot-notation.html) here. Cardinality affect the design
   * of the client API (returning only single reference or collections) and also help us to protect the consistency
   * of the data so that conforms to the creator mental model.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcCardinality cardinality = 4;</code>
   * @return The enum numeric value on the wire for cardinality.
   */
  int getCardinalityValue();
  /**
   * <pre>
   * Cardinality describes the expected count of relations of this type. In evitaDB we define only one-way
   * relationship from the perspective of the entity. We stick to the ERD modelling
   * [standards](https://www.gleek.io/blog/crows-foot-notation.html) here. Cardinality affect the design
   * of the client API (returning only single reference or collections) and also help us to protect the consistency
   * of the data so that conforms to the creator mental model.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcCardinality cardinality = 4;</code>
   * @return The cardinality.
   */
  io.evitadb.externalApi.grpc.generated.GrpcCardinality getCardinality();

  /**
   * <pre>
   * Reference to `EntitySchema.name` of the referenced entity. Might be also any `String`
   * that identifies type some external resource not maintained by Evita.
   * </pre>
   *
   * <code>string referencedEntityType = 5;</code>
   * @return The referencedEntityType.
   */
  java.lang.String getReferencedEntityType();
  /**
   * <pre>
   * Reference to `EntitySchema.name` of the referenced entity. Might be also any `String`
   * that identifies type some external resource not maintained by Evita.
   * </pre>
   *
   * <code>string referencedEntityType = 5;</code>
   * @return The bytes for referencedEntityType.
   */
  com.google.protobuf.ByteString
      getReferencedEntityTypeBytes();

  /**
   * <pre>
   * Name of the reflected reference of the target referencedEntityType(). The referenced entity must contain reference
   * of such name and this reference must target the entity where the reflected reference is defined, and the target
   * entity must be managed on both sides of the relation.
   * </pre>
   *
   * <code>string reflectedReferenceName = 6;</code>
   * @return The reflectedReferenceName.
   */
  java.lang.String getReflectedReferenceName();
  /**
   * <pre>
   * Name of the reflected reference of the target referencedEntityType(). The referenced entity must contain reference
   * of such name and this reference must target the entity where the reflected reference is defined, and the target
   * entity must be managed on both sides of the relation.
   * </pre>
   *
   * <code>string reflectedReferenceName = 6;</code>
   * @return The bytes for reflectedReferenceName.
   */
  com.google.protobuf.ByteString
      getReflectedReferenceNameBytes();

  /**
   * <pre>
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue faceted = 7 [deprecated = true];</code>
   * @deprecated
   * @return Whether the faceted field is set.
   */
  @java.lang.Deprecated boolean hasFaceted();
  /**
   * <pre>
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue faceted = 7 [deprecated = true];</code>
   * @deprecated
   * @return The faceted.
   */
  @java.lang.Deprecated com.google.protobuf.BoolValue getFaceted();
  /**
   * <pre>
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue faceted = 7 [deprecated = true];</code>
   */
  @java.lang.Deprecated com.google.protobuf.BoolValueOrBuilder getFacetedOrBuilder();

  /**
   * <pre>
   * Contains true if the attributes of the reflected reference are inherited from the target reference.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcAttributeInheritanceBehavior attributeInheritanceBehavior = 8;</code>
   * @return The enum numeric value on the wire for attributeInheritanceBehavior.
   */
  int getAttributeInheritanceBehaviorValue();
  /**
   * <pre>
   * Contains true if the attributes of the reflected reference are inherited from the target reference.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcAttributeInheritanceBehavior attributeInheritanceBehavior = 8;</code>
   * @return The attributeInheritanceBehavior.
   */
  io.evitadb.externalApi.grpc.generated.GrpcAttributeInheritanceBehavior getAttributeInheritanceBehavior();

  /**
   * <pre>
   * The array of attribute names that are inherited / excluded from inheritance based on the value of
   * attributeInheritanceBehavior property.
   * </pre>
   *
   * <code>repeated string attributeInheritanceFilter = 9;</code>
   * @return A list containing the attributeInheritanceFilter.
   */
  java.util.List<java.lang.String>
      getAttributeInheritanceFilterList();
  /**
   * <pre>
   * The array of attribute names that are inherited / excluded from inheritance based on the value of
   * attributeInheritanceBehavior property.
   * </pre>
   *
   * <code>repeated string attributeInheritanceFilter = 9;</code>
   * @return The count of attributeInheritanceFilter.
   */
  int getAttributeInheritanceFilterCount();
  /**
   * <pre>
   * The array of attribute names that are inherited / excluded from inheritance based on the value of
   * attributeInheritanceBehavior property.
   * </pre>
   *
   * <code>repeated string attributeInheritanceFilter = 9;</code>
   * @param index The index of the element to return.
   * @return The attributeInheritanceFilter at the given index.
   */
  java.lang.String getAttributeInheritanceFilter(int index);
  /**
   * <pre>
   * The array of attribute names that are inherited / excluded from inheritance based on the value of
   * attributeInheritanceBehavior property.
   * </pre>
   *
   * <code>repeated string attributeInheritanceFilter = 9;</code>
   * @param index The index of the value to return.
   * @return The bytes of the attributeInheritanceFilter at the given index.
   */
  com.google.protobuf.ByteString
      getAttributeInheritanceFilterBytes(int index);

  /**
   * <pre>
   * when set to true, the value of `indexedInScope` field is ignored and the settings are inherited from the original
   * reference.
   * </pre>
   *
   * <code>bool indexedInherited = 10;</code>
   * @return The indexedInherited.
   */
  boolean getIndexedInherited();

  /**
   * <pre>
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is
   * `faceted`.
   * Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 11;</code>
   * @return A list containing the indexedInScopes.
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcEntityScope> getIndexedInScopesList();
  /**
   * <pre>
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is
   * `faceted`.
   * Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 11;</code>
   * @return The count of indexedInScopes.
   */
  int getIndexedInScopesCount();
  /**
   * <pre>
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is
   * `faceted`.
   * Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 11;</code>
   * @param index The index of the element to return.
   * @return The indexedInScopes at the given index.
   */
  io.evitadb.externalApi.grpc.generated.GrpcEntityScope getIndexedInScopes(int index);
  /**
   * <pre>
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is
   * `faceted`.
   * Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 11;</code>
   * @return A list containing the enum numeric values on the wire for indexedInScopes.
   */
  java.util.List<java.lang.Integer>
  getIndexedInScopesValueList();
  /**
   * <pre>
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is
   * `faceted`.
   * Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 11;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of indexedInScopes at the given index.
   */
  int getIndexedInScopesValue(int index);

  /**
   * <pre>
   * when set to true, the value of `facetedInScope` field is ignored and the settings are inherited from the original
   * reference.
   * </pre>
   *
   * <code>bool facetedInherited = 12;</code>
   * @return The facetedInherited.
   */
  boolean getFacetedInherited();

  /**
   * <pre>
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope facetedInScopes = 13;</code>
   * @return A list containing the facetedInScopes.
   */
  java.util.List<io.evitadb.externalApi.grpc.generated.GrpcEntityScope> getFacetedInScopesList();
  /**
   * <pre>
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope facetedInScopes = 13;</code>
   * @return The count of facetedInScopes.
   */
  int getFacetedInScopesCount();
  /**
   * <pre>
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope facetedInScopes = 13;</code>
   * @param index The index of the element to return.
   * @return The facetedInScopes at the given index.
   */
  io.evitadb.externalApi.grpc.generated.GrpcEntityScope getFacetedInScopes(int index);
  /**
   * <pre>
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope facetedInScopes = 13;</code>
   * @return A list containing the enum numeric values on the wire for facetedInScopes.
   */
  java.util.List<java.lang.Integer>
  getFacetedInScopesValueList();
  /**
   * <pre>
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcEntityScope facetedInScopes = 13;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of facetedInScopes at the given index.
   */
  int getFacetedInScopesValue(int index);
}
