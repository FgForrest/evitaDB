/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2024
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcEnums.proto

package io.evitadb.externalApi.grpc.generated;

/**
 * <pre>
 * This enum contains all supported types in evitaDB query context.
 * </pre>
 *
 * Protobuf enum {@code io.evitadb.externalApi.grpc.generated.GrpcEvitaDataType}
 */
public enum GrpcEvitaDataType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Represents string data type.
   * </pre>
   *
   * <code>STRING = 0;</code>
   */
  STRING(0),
  /**
   * <pre>
   * Represents byte data type.
   * </pre>
   *
   * <code>BYTE = 1;</code>
   */
  BYTE(1),
  /**
   * <pre>
   * Represents short data type.
   * </pre>
   *
   * <code>SHORT = 2;</code>
   */
  SHORT(2),
  /**
   * <pre>
   * Represents integer data type.
   * </pre>
   *
   * <code>INTEGER = 3;</code>
   */
  INTEGER(3),
  /**
   * <pre>
   * Represents long data type.
   * </pre>
   *
   * <code>LONG = 4;</code>
   */
  LONG(4),
  /**
   * <pre>
   * Represents boolean data type.
   * </pre>
   *
   * <code>BOOLEAN = 5;</code>
   */
  BOOLEAN(5),
  /**
   * <pre>
   * Represents character data type.
   * </pre>
   *
   * <code>CHARACTER = 6;</code>
   */
  CHARACTER(6),
  /**
   * <pre>
   * Represents BigDecimal data type.
   * </pre>
   *
   * <code>BIG_DECIMAL = 7;</code>
   */
  BIG_DECIMAL(7),
  /**
   * <pre>
   * Represents OffsetDateTime data type.
   * </pre>
   *
   * <code>OFFSET_DATE_TIME = 8;</code>
   */
  OFFSET_DATE_TIME(8),
  /**
   * <pre>
   * Represents LocalDateTime data type.
   * </pre>
   *
   * <code>LOCAL_DATE_TIME = 9;</code>
   */
  LOCAL_DATE_TIME(9),
  /**
   * <pre>
   * Represents LocalDate data type.
   * </pre>
   *
   * <code>LOCAL_DATE = 10;</code>
   */
  LOCAL_DATE(10),
  /**
   * <pre>
   * Represents LocalTime data type.
   * </pre>
   *
   * <code>LOCAL_TIME = 11;</code>
   */
  LOCAL_TIME(11),
  /**
   * <pre>
   * Represents DateTimeRange data type.
   * </pre>
   *
   * <code>DATE_TIME_RANGE = 12;</code>
   */
  DATE_TIME_RANGE(12),
  /**
   * <pre>
   * Represents BigDecimalNumberRange data type.
   * </pre>
   *
   * <code>BIG_DECIMAL_NUMBER_RANGE = 13;</code>
   */
  BIG_DECIMAL_NUMBER_RANGE(13),
  /**
   * <pre>
   * Represents LongNumberRange data type.
   * </pre>
   *
   * <code>LONG_NUMBER_RANGE = 14;</code>
   */
  LONG_NUMBER_RANGE(14),
  /**
   * <pre>
   * Represents IntegerNumberRange data type.
   * </pre>
   *
   * <code>INTEGER_NUMBER_RANGE = 15;</code>
   */
  INTEGER_NUMBER_RANGE(15),
  /**
   * <pre>
   * Represents ShortNumberRange data type.
   * </pre>
   *
   * <code>SHORT_NUMBER_RANGE = 16;</code>
   */
  SHORT_NUMBER_RANGE(16),
  /**
   * <pre>
   * Represents ByteNumberRange data type.
   * </pre>
   *
   * <code>BYTE_NUMBER_RANGE = 17;</code>
   */
  BYTE_NUMBER_RANGE(17),
  /**
   * <pre>
   * Represents Locale data type.
   * </pre>
   *
   * <code>LOCALE = 18;</code>
   */
  LOCALE(18),
  /**
   * <pre>
   * Represents Currency data type.
   * </pre>
   *
   * <code>CURRENCY = 19;</code>
   */
  CURRENCY(19),
  /**
   * <pre>
   * Represents UUID data type.
   * </pre>
   *
   * <code>UUID = 20;</code>
   */
  UUID(20),
  /**
   * <pre>
   * Represents Predecessor data type.
   * </pre>
   *
   * <code>PREDECESSOR = 21;</code>
   */
  PREDECESSOR(21),
  /**
   * <pre>
   * Represents string array data type.
   * </pre>
   *
   * <code>STRING_ARRAY = 50;</code>
   */
  STRING_ARRAY(50),
  /**
   * <pre>
   * Represents byte array data type.
   * </pre>
   *
   * <code>BYTE_ARRAY = 51;</code>
   */
  BYTE_ARRAY(51),
  /**
   * <pre>
   * Represents short array data type.
   * </pre>
   *
   * <code>SHORT_ARRAY = 52;</code>
   */
  SHORT_ARRAY(52),
  /**
   * <pre>
   * Represents integer array data type.
   * </pre>
   *
   * <code>INTEGER_ARRAY = 53;</code>
   */
  INTEGER_ARRAY(53),
  /**
   * <pre>
   * Represents long array data type.
   * </pre>
   *
   * <code>LONG_ARRAY = 54;</code>
   */
  LONG_ARRAY(54),
  /**
   * <pre>
   * Represents boolean array data type.
   * </pre>
   *
   * <code>BOOLEAN_ARRAY = 55;</code>
   */
  BOOLEAN_ARRAY(55),
  /**
   * <pre>
   * Represents character array data type.
   * </pre>
   *
   * <code>CHARACTER_ARRAY = 56;</code>
   */
  CHARACTER_ARRAY(56),
  /**
   * <pre>
   * Represents BigDecimal array data type.
   * </pre>
   *
   * <code>BIG_DECIMAL_ARRAY = 57;</code>
   */
  BIG_DECIMAL_ARRAY(57),
  /**
   * <pre>
   * Represents OffsetDateTime array data type.
   * </pre>
   *
   * <code>OFFSET_DATE_TIME_ARRAY = 58;</code>
   */
  OFFSET_DATE_TIME_ARRAY(58),
  /**
   * <pre>
   * Represents LocalDateTime array data type.
   * </pre>
   *
   * <code>LOCAL_DATE_TIME_ARRAY = 59;</code>
   */
  LOCAL_DATE_TIME_ARRAY(59),
  /**
   * <pre>
   * Represents LocalDate array data type.
   * </pre>
   *
   * <code>LOCAL_DATE_ARRAY = 60;</code>
   */
  LOCAL_DATE_ARRAY(60),
  /**
   * <pre>
   * Represents LocalTime array data type.
   * </pre>
   *
   * <code>LOCAL_TIME_ARRAY = 61;</code>
   */
  LOCAL_TIME_ARRAY(61),
  /**
   * <pre>
   * Represents DateTimeRange array data type.
   * </pre>
   *
   * <code>DATE_TIME_RANGE_ARRAY = 62;</code>
   */
  DATE_TIME_RANGE_ARRAY(62),
  /**
   * <pre>
   * Represents BigDecimalNumberRange array data type.
   * </pre>
   *
   * <code>BIG_DECIMAL_NUMBER_RANGE_ARRAY = 63;</code>
   */
  BIG_DECIMAL_NUMBER_RANGE_ARRAY(63),
  /**
   * <pre>
   * Represents LongNumberRange array data type.
   * </pre>
   *
   * <code>LONG_NUMBER_RANGE_ARRAY = 64;</code>
   */
  LONG_NUMBER_RANGE_ARRAY(64),
  /**
   * <pre>
   * Represents IntegerNumberRange array data type.
   * </pre>
   *
   * <code>INTEGER_NUMBER_RANGE_ARRAY = 65;</code>
   */
  INTEGER_NUMBER_RANGE_ARRAY(65),
  /**
   * <pre>
   * Represents ShortNumberRange array data type.
   * </pre>
   *
   * <code>SHORT_NUMBER_RANGE_ARRAY = 66;</code>
   */
  SHORT_NUMBER_RANGE_ARRAY(66),
  /**
   * <pre>
   * Represents ByteNumberRange array data type.
   * </pre>
   *
   * <code>BYTE_NUMBER_RANGE_ARRAY = 67;</code>
   */
  BYTE_NUMBER_RANGE_ARRAY(67),
  /**
   * <pre>
   * Represents Locale array data type.
   * </pre>
   *
   * <code>LOCALE_ARRAY = 68;</code>
   */
  LOCALE_ARRAY(68),
  /**
   * <pre>
   * Represents Currency array data type.
   * </pre>
   *
   * <code>CURRENCY_ARRAY = 69;</code>
   */
  CURRENCY_ARRAY(69),
  /**
   * <pre>
   * Represents UUID array data type.
   * </pre>
   *
   * <code>UUID_ARRAY = 70;</code>
   */
  UUID_ARRAY(70),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Represents string data type.
   * </pre>
   *
   * <code>STRING = 0;</code>
   */
  public static final int STRING_VALUE = 0;
  /**
   * <pre>
   * Represents byte data type.
   * </pre>
   *
   * <code>BYTE = 1;</code>
   */
  public static final int BYTE_VALUE = 1;
  /**
   * <pre>
   * Represents short data type.
   * </pre>
   *
   * <code>SHORT = 2;</code>
   */
  public static final int SHORT_VALUE = 2;
  /**
   * <pre>
   * Represents integer data type.
   * </pre>
   *
   * <code>INTEGER = 3;</code>
   */
  public static final int INTEGER_VALUE = 3;
  /**
   * <pre>
   * Represents long data type.
   * </pre>
   *
   * <code>LONG = 4;</code>
   */
  public static final int LONG_VALUE = 4;
  /**
   * <pre>
   * Represents boolean data type.
   * </pre>
   *
   * <code>BOOLEAN = 5;</code>
   */
  public static final int BOOLEAN_VALUE = 5;
  /**
   * <pre>
   * Represents character data type.
   * </pre>
   *
   * <code>CHARACTER = 6;</code>
   */
  public static final int CHARACTER_VALUE = 6;
  /**
   * <pre>
   * Represents BigDecimal data type.
   * </pre>
   *
   * <code>BIG_DECIMAL = 7;</code>
   */
  public static final int BIG_DECIMAL_VALUE = 7;
  /**
   * <pre>
   * Represents OffsetDateTime data type.
   * </pre>
   *
   * <code>OFFSET_DATE_TIME = 8;</code>
   */
  public static final int OFFSET_DATE_TIME_VALUE = 8;
  /**
   * <pre>
   * Represents LocalDateTime data type.
   * </pre>
   *
   * <code>LOCAL_DATE_TIME = 9;</code>
   */
  public static final int LOCAL_DATE_TIME_VALUE = 9;
  /**
   * <pre>
   * Represents LocalDate data type.
   * </pre>
   *
   * <code>LOCAL_DATE = 10;</code>
   */
  public static final int LOCAL_DATE_VALUE = 10;
  /**
   * <pre>
   * Represents LocalTime data type.
   * </pre>
   *
   * <code>LOCAL_TIME = 11;</code>
   */
  public static final int LOCAL_TIME_VALUE = 11;
  /**
   * <pre>
   * Represents DateTimeRange data type.
   * </pre>
   *
   * <code>DATE_TIME_RANGE = 12;</code>
   */
  public static final int DATE_TIME_RANGE_VALUE = 12;
  /**
   * <pre>
   * Represents BigDecimalNumberRange data type.
   * </pre>
   *
   * <code>BIG_DECIMAL_NUMBER_RANGE = 13;</code>
   */
  public static final int BIG_DECIMAL_NUMBER_RANGE_VALUE = 13;
  /**
   * <pre>
   * Represents LongNumberRange data type.
   * </pre>
   *
   * <code>LONG_NUMBER_RANGE = 14;</code>
   */
  public static final int LONG_NUMBER_RANGE_VALUE = 14;
  /**
   * <pre>
   * Represents IntegerNumberRange data type.
   * </pre>
   *
   * <code>INTEGER_NUMBER_RANGE = 15;</code>
   */
  public static final int INTEGER_NUMBER_RANGE_VALUE = 15;
  /**
   * <pre>
   * Represents ShortNumberRange data type.
   * </pre>
   *
   * <code>SHORT_NUMBER_RANGE = 16;</code>
   */
  public static final int SHORT_NUMBER_RANGE_VALUE = 16;
  /**
   * <pre>
   * Represents ByteNumberRange data type.
   * </pre>
   *
   * <code>BYTE_NUMBER_RANGE = 17;</code>
   */
  public static final int BYTE_NUMBER_RANGE_VALUE = 17;
  /**
   * <pre>
   * Represents Locale data type.
   * </pre>
   *
   * <code>LOCALE = 18;</code>
   */
  public static final int LOCALE_VALUE = 18;
  /**
   * <pre>
   * Represents Currency data type.
   * </pre>
   *
   * <code>CURRENCY = 19;</code>
   */
  public static final int CURRENCY_VALUE = 19;
  /**
   * <pre>
   * Represents UUID data type.
   * </pre>
   *
   * <code>UUID = 20;</code>
   */
  public static final int UUID_VALUE = 20;
  /**
   * <pre>
   * Represents Predecessor data type.
   * </pre>
   *
   * <code>PREDECESSOR = 21;</code>
   */
  public static final int PREDECESSOR_VALUE = 21;
  /**
   * <pre>
   * Represents string array data type.
   * </pre>
   *
   * <code>STRING_ARRAY = 50;</code>
   */
  public static final int STRING_ARRAY_VALUE = 50;
  /**
   * <pre>
   * Represents byte array data type.
   * </pre>
   *
   * <code>BYTE_ARRAY = 51;</code>
   */
  public static final int BYTE_ARRAY_VALUE = 51;
  /**
   * <pre>
   * Represents short array data type.
   * </pre>
   *
   * <code>SHORT_ARRAY = 52;</code>
   */
  public static final int SHORT_ARRAY_VALUE = 52;
  /**
   * <pre>
   * Represents integer array data type.
   * </pre>
   *
   * <code>INTEGER_ARRAY = 53;</code>
   */
  public static final int INTEGER_ARRAY_VALUE = 53;
  /**
   * <pre>
   * Represents long array data type.
   * </pre>
   *
   * <code>LONG_ARRAY = 54;</code>
   */
  public static final int LONG_ARRAY_VALUE = 54;
  /**
   * <pre>
   * Represents boolean array data type.
   * </pre>
   *
   * <code>BOOLEAN_ARRAY = 55;</code>
   */
  public static final int BOOLEAN_ARRAY_VALUE = 55;
  /**
   * <pre>
   * Represents character array data type.
   * </pre>
   *
   * <code>CHARACTER_ARRAY = 56;</code>
   */
  public static final int CHARACTER_ARRAY_VALUE = 56;
  /**
   * <pre>
   * Represents BigDecimal array data type.
   * </pre>
   *
   * <code>BIG_DECIMAL_ARRAY = 57;</code>
   */
  public static final int BIG_DECIMAL_ARRAY_VALUE = 57;
  /**
   * <pre>
   * Represents OffsetDateTime array data type.
   * </pre>
   *
   * <code>OFFSET_DATE_TIME_ARRAY = 58;</code>
   */
  public static final int OFFSET_DATE_TIME_ARRAY_VALUE = 58;
  /**
   * <pre>
   * Represents LocalDateTime array data type.
   * </pre>
   *
   * <code>LOCAL_DATE_TIME_ARRAY = 59;</code>
   */
  public static final int LOCAL_DATE_TIME_ARRAY_VALUE = 59;
  /**
   * <pre>
   * Represents LocalDate array data type.
   * </pre>
   *
   * <code>LOCAL_DATE_ARRAY = 60;</code>
   */
  public static final int LOCAL_DATE_ARRAY_VALUE = 60;
  /**
   * <pre>
   * Represents LocalTime array data type.
   * </pre>
   *
   * <code>LOCAL_TIME_ARRAY = 61;</code>
   */
  public static final int LOCAL_TIME_ARRAY_VALUE = 61;
  /**
   * <pre>
   * Represents DateTimeRange array data type.
   * </pre>
   *
   * <code>DATE_TIME_RANGE_ARRAY = 62;</code>
   */
  public static final int DATE_TIME_RANGE_ARRAY_VALUE = 62;
  /**
   * <pre>
   * Represents BigDecimalNumberRange array data type.
   * </pre>
   *
   * <code>BIG_DECIMAL_NUMBER_RANGE_ARRAY = 63;</code>
   */
  public static final int BIG_DECIMAL_NUMBER_RANGE_ARRAY_VALUE = 63;
  /**
   * <pre>
   * Represents LongNumberRange array data type.
   * </pre>
   *
   * <code>LONG_NUMBER_RANGE_ARRAY = 64;</code>
   */
  public static final int LONG_NUMBER_RANGE_ARRAY_VALUE = 64;
  /**
   * <pre>
   * Represents IntegerNumberRange array data type.
   * </pre>
   *
   * <code>INTEGER_NUMBER_RANGE_ARRAY = 65;</code>
   */
  public static final int INTEGER_NUMBER_RANGE_ARRAY_VALUE = 65;
  /**
   * <pre>
   * Represents ShortNumberRange array data type.
   * </pre>
   *
   * <code>SHORT_NUMBER_RANGE_ARRAY = 66;</code>
   */
  public static final int SHORT_NUMBER_RANGE_ARRAY_VALUE = 66;
  /**
   * <pre>
   * Represents ByteNumberRange array data type.
   * </pre>
   *
   * <code>BYTE_NUMBER_RANGE_ARRAY = 67;</code>
   */
  public static final int BYTE_NUMBER_RANGE_ARRAY_VALUE = 67;
  /**
   * <pre>
   * Represents Locale array data type.
   * </pre>
   *
   * <code>LOCALE_ARRAY = 68;</code>
   */
  public static final int LOCALE_ARRAY_VALUE = 68;
  /**
   * <pre>
   * Represents Currency array data type.
   * </pre>
   *
   * <code>CURRENCY_ARRAY = 69;</code>
   */
  public static final int CURRENCY_ARRAY_VALUE = 69;
  /**
   * <pre>
   * Represents UUID array data type.
   * </pre>
   *
   * <code>UUID_ARRAY = 70;</code>
   */
  public static final int UUID_ARRAY_VALUE = 70;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static GrpcEvitaDataType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static GrpcEvitaDataType forNumber(int value) {
    switch (value) {
      case 0: return STRING;
      case 1: return BYTE;
      case 2: return SHORT;
      case 3: return INTEGER;
      case 4: return LONG;
      case 5: return BOOLEAN;
      case 6: return CHARACTER;
      case 7: return BIG_DECIMAL;
      case 8: return OFFSET_DATE_TIME;
      case 9: return LOCAL_DATE_TIME;
      case 10: return LOCAL_DATE;
      case 11: return LOCAL_TIME;
      case 12: return DATE_TIME_RANGE;
      case 13: return BIG_DECIMAL_NUMBER_RANGE;
      case 14: return LONG_NUMBER_RANGE;
      case 15: return INTEGER_NUMBER_RANGE;
      case 16: return SHORT_NUMBER_RANGE;
      case 17: return BYTE_NUMBER_RANGE;
      case 18: return LOCALE;
      case 19: return CURRENCY;
      case 20: return UUID;
      case 21: return PREDECESSOR;
      case 50: return STRING_ARRAY;
      case 51: return BYTE_ARRAY;
      case 52: return SHORT_ARRAY;
      case 53: return INTEGER_ARRAY;
      case 54: return LONG_ARRAY;
      case 55: return BOOLEAN_ARRAY;
      case 56: return CHARACTER_ARRAY;
      case 57: return BIG_DECIMAL_ARRAY;
      case 58: return OFFSET_DATE_TIME_ARRAY;
      case 59: return LOCAL_DATE_TIME_ARRAY;
      case 60: return LOCAL_DATE_ARRAY;
      case 61: return LOCAL_TIME_ARRAY;
      case 62: return DATE_TIME_RANGE_ARRAY;
      case 63: return BIG_DECIMAL_NUMBER_RANGE_ARRAY;
      case 64: return LONG_NUMBER_RANGE_ARRAY;
      case 65: return INTEGER_NUMBER_RANGE_ARRAY;
      case 66: return SHORT_NUMBER_RANGE_ARRAY;
      case 67: return BYTE_NUMBER_RANGE_ARRAY;
      case 68: return LOCALE_ARRAY;
      case 69: return CURRENCY_ARRAY;
      case 70: return UUID_ARRAY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<GrpcEvitaDataType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      GrpcEvitaDataType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<GrpcEvitaDataType>() {
          public GrpcEvitaDataType findValueByNumber(int number) {
            return GrpcEvitaDataType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.evitadb.externalApi.grpc.generated.GrpcEnums.getDescriptor().getEnumTypes().get(19);
  }

  private static final GrpcEvitaDataType[] VALUES = values();

  public static GrpcEvitaDataType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private GrpcEvitaDataType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:io.evitadb.externalApi.grpc.generated.GrpcEvitaDataType)
}

