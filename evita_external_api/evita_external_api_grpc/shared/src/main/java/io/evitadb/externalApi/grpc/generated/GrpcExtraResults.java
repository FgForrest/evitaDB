/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2025
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcExtraResults.proto

// Protobuf Java Version: 3.25.8
package io.evitadb.externalApi.grpc.generated;

/**
 * <pre>
 * This DTO contains extra results that are computed based on the query results.
 * </pre>
 *
 * Protobuf type {@code io.evitadb.externalApi.grpc.generated.GrpcExtraResults}
 */
public final class GrpcExtraResults extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:io.evitadb.externalApi.grpc.generated.GrpcExtraResults)
    GrpcExtraResultsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GrpcExtraResults.newBuilder() to construct.
  private GrpcExtraResults(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GrpcExtraResults() {
    facetGroupStatistics_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new GrpcExtraResults();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
      int number) {
    switch (number) {
      case 1:
        return internalGetAttributeHistogram();
      case 5:
        return internalGetHierarchy();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.evitadb.externalApi.grpc.generated.GrpcExtraResults.class, io.evitadb.externalApi.grpc.generated.GrpcExtraResults.Builder.class);
  }

  private int bitField0_;
  public static final int ATTRIBUTEHISTOGRAM_FIELD_NUMBER = 1;
  private static final class AttributeHistogramDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>newDefaultInstance(
                io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_AttributeHistogramEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> attributeHistogram_;
  private com.google.protobuf.MapField<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
  internalGetAttributeHistogram() {
    if (attributeHistogram_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          AttributeHistogramDefaultEntryHolder.defaultEntry);
    }
    return attributeHistogram_;
  }
  public int getAttributeHistogramCount() {
    return internalGetAttributeHistogram().getMap().size();
  }
  /**
   * <pre>
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
   */
  @java.lang.Override
  public boolean containsAttributeHistogram(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetAttributeHistogram().getMap().containsKey(key);
  }
  /**
   * Use {@link #getAttributeHistogramMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> getAttributeHistogram() {
    return getAttributeHistogramMap();
  }
  /**
   * <pre>
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> getAttributeHistogramMap() {
    return internalGetAttributeHistogram().getMap();
  }
  /**
   * <pre>
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
   */
  @java.lang.Override
  public /* nullable */
io.evitadb.externalApi.grpc.generated.GrpcHistogram getAttributeHistogramOrDefault(
      java.lang.String key,
      /* nullable */
io.evitadb.externalApi.grpc.generated.GrpcHistogram defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> map =
        internalGetAttributeHistogram().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHistogram getAttributeHistogramOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> map =
        internalGetAttributeHistogram().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int PRICEHISTOGRAM_FIELD_NUMBER = 2;
  private io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram_;
  /**
   * <pre>
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
   * @return Whether the priceHistogram field is set.
   */
  @java.lang.Override
  public boolean hasPriceHistogram() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
   * @return The priceHistogram.
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHistogram getPriceHistogram() {
    return priceHistogram_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance() : priceHistogram_;
  }
  /**
   * <pre>
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder getPriceHistogramOrBuilder() {
    return priceHistogram_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance() : priceHistogram_;
  }

  public static final int FACETGROUPSTATISTICS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> facetGroupStatistics_;
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> getFacetGroupStatisticsList() {
    return facetGroupStatistics_;
  }
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder>
      getFacetGroupStatisticsOrBuilderList() {
    return facetGroupStatistics_;
  }
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public int getFacetGroupStatisticsCount() {
    return facetGroupStatistics_.size();
  }
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics getFacetGroupStatistics(int index) {
    return facetGroupStatistics_.get(index);
  }
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder getFacetGroupStatisticsOrBuilder(
      int index) {
    return facetGroupStatistics_.get(index);
  }

  public static final int SELFHIERARCHY_FIELD_NUMBER = 4;
  private io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy_;
  /**
   * <pre>
   * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
   * the queried hierarchy entity.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
   * @return Whether the selfHierarchy field is set.
   */
  @java.lang.Override
  public boolean hasSelfHierarchy() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
   * the queried hierarchy entity.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
   * @return The selfHierarchy.
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getSelfHierarchy() {
    return selfHierarchy_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance() : selfHierarchy_;
  }
  /**
   * <pre>
   * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
   * the queried hierarchy entity.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder getSelfHierarchyOrBuilder() {
    return selfHierarchy_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance() : selfHierarchy_;
  }

  public static final int HIERARCHY_FIELD_NUMBER = 5;
  private static final class HierarchyDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>newDefaultInstance(
                io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_HierarchyEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> hierarchy_;
  private com.google.protobuf.MapField<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
  internalGetHierarchy() {
    if (hierarchy_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          HierarchyDefaultEntryHolder.defaultEntry);
    }
    return hierarchy_;
  }
  public int getHierarchyCount() {
    return internalGetHierarchy().getMap().size();
  }
  /**
   * <pre>
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
   */
  @java.lang.Override
  public boolean containsHierarchy(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetHierarchy().getMap().containsKey(key);
  }
  /**
   * Use {@link #getHierarchyMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> getHierarchy() {
    return getHierarchyMap();
  }
  /**
   * <pre>
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> getHierarchyMap() {
    return internalGetHierarchy().getMap();
  }
  /**
   * <pre>
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
   */
  @java.lang.Override
  public /* nullable */
io.evitadb.externalApi.grpc.generated.GrpcHierarchy getHierarchyOrDefault(
      java.lang.String key,
      /* nullable */
io.evitadb.externalApi.grpc.generated.GrpcHierarchy defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> map =
        internalGetHierarchy().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getHierarchyOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> map =
        internalGetHierarchy().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int QUERYTELEMETRY_FIELD_NUMBER = 6;
  private io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry_;
  /**
   * <pre>
   * This DTO contains detailed information about query processing time and its decomposition to single operations.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
   * @return Whether the queryTelemetry field is set.
   */
  @java.lang.Override
  public boolean hasQueryTelemetry() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * This DTO contains detailed information about query processing time and its decomposition to single operations.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
   * @return The queryTelemetry.
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry getQueryTelemetry() {
    return queryTelemetry_ == null ? io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.getDefaultInstance() : queryTelemetry_;
  }
  /**
   * <pre>
   * This DTO contains detailed information about query processing time and its decomposition to single operations.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder getQueryTelemetryOrBuilder() {
    return queryTelemetry_ == null ? io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.getDefaultInstance() : queryTelemetry_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetAttributeHistogram(),
        AttributeHistogramDefaultEntryHolder.defaultEntry,
        1);
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getPriceHistogram());
    }
    for (int i = 0; i < facetGroupStatistics_.size(); i++) {
      output.writeMessage(3, facetGroupStatistics_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getSelfHierarchy());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetHierarchy(),
        HierarchyDefaultEntryHolder.defaultEntry,
        5);
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(6, getQueryTelemetry());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> entry
         : internalGetAttributeHistogram().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
      attributeHistogram__ = AttributeHistogramDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, attributeHistogram__);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getPriceHistogram());
    }
    for (int i = 0; i < facetGroupStatistics_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, facetGroupStatistics_.get(i));
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getSelfHierarchy());
    }
    for (java.util.Map.Entry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> entry
         : internalGetHierarchy().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
      hierarchy__ = HierarchyDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, hierarchy__);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getQueryTelemetry());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.evitadb.externalApi.grpc.generated.GrpcExtraResults)) {
      return super.equals(obj);
    }
    io.evitadb.externalApi.grpc.generated.GrpcExtraResults other = (io.evitadb.externalApi.grpc.generated.GrpcExtraResults) obj;

    if (!internalGetAttributeHistogram().equals(
        other.internalGetAttributeHistogram())) return false;
    if (hasPriceHistogram() != other.hasPriceHistogram()) return false;
    if (hasPriceHistogram()) {
      if (!getPriceHistogram()
          .equals(other.getPriceHistogram())) return false;
    }
    if (!getFacetGroupStatisticsList()
        .equals(other.getFacetGroupStatisticsList())) return false;
    if (hasSelfHierarchy() != other.hasSelfHierarchy()) return false;
    if (hasSelfHierarchy()) {
      if (!getSelfHierarchy()
          .equals(other.getSelfHierarchy())) return false;
    }
    if (!internalGetHierarchy().equals(
        other.internalGetHierarchy())) return false;
    if (hasQueryTelemetry() != other.hasQueryTelemetry()) return false;
    if (hasQueryTelemetry()) {
      if (!getQueryTelemetry()
          .equals(other.getQueryTelemetry())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetAttributeHistogram().getMap().isEmpty()) {
      hash = (37 * hash) + ATTRIBUTEHISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + internalGetAttributeHistogram().hashCode();
    }
    if (hasPriceHistogram()) {
      hash = (37 * hash) + PRICEHISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + getPriceHistogram().hashCode();
    }
    if (getFacetGroupStatisticsCount() > 0) {
      hash = (37 * hash) + FACETGROUPSTATISTICS_FIELD_NUMBER;
      hash = (53 * hash) + getFacetGroupStatisticsList().hashCode();
    }
    if (hasSelfHierarchy()) {
      hash = (37 * hash) + SELFHIERARCHY_FIELD_NUMBER;
      hash = (53 * hash) + getSelfHierarchy().hashCode();
    }
    if (!internalGetHierarchy().getMap().isEmpty()) {
      hash = (37 * hash) + HIERARCHY_FIELD_NUMBER;
      hash = (53 * hash) + internalGetHierarchy().hashCode();
    }
    if (hasQueryTelemetry()) {
      hash = (37 * hash) + QUERYTELEMETRY_FIELD_NUMBER;
      hash = (53 * hash) + getQueryTelemetry().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.evitadb.externalApi.grpc.generated.GrpcExtraResults prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * This DTO contains extra results that are computed based on the query results.
   * </pre>
   *
   * Protobuf type {@code io.evitadb.externalApi.grpc.generated.GrpcExtraResults}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:io.evitadb.externalApi.grpc.generated.GrpcExtraResults)
      io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetAttributeHistogram();
        case 5:
          return internalGetHierarchy();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapFieldReflectionAccessor internalGetMutableMapFieldReflection(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableAttributeHistogram();
        case 5:
          return internalGetMutableHierarchy();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.evitadb.externalApi.grpc.generated.GrpcExtraResults.class, io.evitadb.externalApi.grpc.generated.GrpcExtraResults.Builder.class);
    }

    // Construct using io.evitadb.externalApi.grpc.generated.GrpcExtraResults.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPriceHistogramFieldBuilder();
        getFacetGroupStatisticsFieldBuilder();
        getSelfHierarchyFieldBuilder();
        getQueryTelemetryFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      internalGetMutableAttributeHistogram().clear();
      priceHistogram_ = null;
      if (priceHistogramBuilder_ != null) {
        priceHistogramBuilder_.dispose();
        priceHistogramBuilder_ = null;
      }
      if (facetGroupStatisticsBuilder_ == null) {
        facetGroupStatistics_ = java.util.Collections.emptyList();
      } else {
        facetGroupStatistics_ = null;
        facetGroupStatisticsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      selfHierarchy_ = null;
      if (selfHierarchyBuilder_ != null) {
        selfHierarchyBuilder_.dispose();
        selfHierarchyBuilder_ = null;
      }
      internalGetMutableHierarchy().clear();
      queryTelemetry_ = null;
      if (queryTelemetryBuilder_ != null) {
        queryTelemetryBuilder_.dispose();
        queryTelemetryBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_descriptor;
    }

    @java.lang.Override
    public io.evitadb.externalApi.grpc.generated.GrpcExtraResults getDefaultInstanceForType() {
      return io.evitadb.externalApi.grpc.generated.GrpcExtraResults.getDefaultInstance();
    }

    @java.lang.Override
    public io.evitadb.externalApi.grpc.generated.GrpcExtraResults build() {
      io.evitadb.externalApi.grpc.generated.GrpcExtraResults result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.evitadb.externalApi.grpc.generated.GrpcExtraResults buildPartial() {
      io.evitadb.externalApi.grpc.generated.GrpcExtraResults result = new io.evitadb.externalApi.grpc.generated.GrpcExtraResults(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.evitadb.externalApi.grpc.generated.GrpcExtraResults result) {
      if (facetGroupStatisticsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          facetGroupStatistics_ = java.util.Collections.unmodifiableList(facetGroupStatistics_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.facetGroupStatistics_ = facetGroupStatistics_;
      } else {
        result.facetGroupStatistics_ = facetGroupStatisticsBuilder_.build();
      }
    }

    private void buildPartial0(io.evitadb.externalApi.grpc.generated.GrpcExtraResults result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.attributeHistogram_ = internalGetAttributeHistogram().build(AttributeHistogramDefaultEntryHolder.defaultEntry);
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.priceHistogram_ = priceHistogramBuilder_ == null
            ? priceHistogram_
            : priceHistogramBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.selfHierarchy_ = selfHierarchyBuilder_ == null
            ? selfHierarchy_
            : selfHierarchyBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.hierarchy_ = internalGetHierarchy().build(HierarchyDefaultEntryHolder.defaultEntry);
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.queryTelemetry_ = queryTelemetryBuilder_ == null
            ? queryTelemetry_
            : queryTelemetryBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.evitadb.externalApi.grpc.generated.GrpcExtraResults) {
        return mergeFrom((io.evitadb.externalApi.grpc.generated.GrpcExtraResults)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.evitadb.externalApi.grpc.generated.GrpcExtraResults other) {
      if (other == io.evitadb.externalApi.grpc.generated.GrpcExtraResults.getDefaultInstance()) return this;
      internalGetMutableAttributeHistogram().mergeFrom(
          other.internalGetAttributeHistogram());
      bitField0_ |= 0x00000001;
      if (other.hasPriceHistogram()) {
        mergePriceHistogram(other.getPriceHistogram());
      }
      if (facetGroupStatisticsBuilder_ == null) {
        if (!other.facetGroupStatistics_.isEmpty()) {
          if (facetGroupStatistics_.isEmpty()) {
            facetGroupStatistics_ = other.facetGroupStatistics_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureFacetGroupStatisticsIsMutable();
            facetGroupStatistics_.addAll(other.facetGroupStatistics_);
          }
          onChanged();
        }
      } else {
        if (!other.facetGroupStatistics_.isEmpty()) {
          if (facetGroupStatisticsBuilder_.isEmpty()) {
            facetGroupStatisticsBuilder_.dispose();
            facetGroupStatisticsBuilder_ = null;
            facetGroupStatistics_ = other.facetGroupStatistics_;
            bitField0_ = (bitField0_ & ~0x00000004);
            facetGroupStatisticsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFacetGroupStatisticsFieldBuilder() : null;
          } else {
            facetGroupStatisticsBuilder_.addAllMessages(other.facetGroupStatistics_);
          }
        }
      }
      if (other.hasSelfHierarchy()) {
        mergeSelfHierarchy(other.getSelfHierarchy());
      }
      internalGetMutableHierarchy().mergeFrom(
          other.internalGetHierarchy());
      bitField0_ |= 0x00000010;
      if (other.hasQueryTelemetry()) {
        mergeQueryTelemetry(other.getQueryTelemetry());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
              attributeHistogram__ = input.readMessage(
                  AttributeHistogramDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableAttributeHistogram().ensureBuilderMap().put(
                  attributeHistogram__.getKey(), attributeHistogram__.getValue());
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getPriceHistogramFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics m =
                  input.readMessage(
                      io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.parser(),
                      extensionRegistry);
              if (facetGroupStatisticsBuilder_ == null) {
                ensureFacetGroupStatisticsIsMutable();
                facetGroupStatistics_.add(m);
              } else {
                facetGroupStatisticsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getSelfHierarchyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
              hierarchy__ = input.readMessage(
                  HierarchyDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableHierarchy().ensureBuilderMap().put(
                  hierarchy__.getKey(), hierarchy__.getValue());
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getQueryTelemetryFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private static final class AttributeHistogramConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder, io.evitadb.externalApi.grpc.generated.GrpcHistogram> {
      @java.lang.Override
      public io.evitadb.externalApi.grpc.generated.GrpcHistogram build(io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder val) {
        if (val instanceof io.evitadb.externalApi.grpc.generated.GrpcHistogram) { return (io.evitadb.externalApi.grpc.generated.GrpcHistogram) val; }
        return ((io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> defaultEntry() {
        return AttributeHistogramDefaultEntryHolder.defaultEntry;
      }
    };
    private static final AttributeHistogramConverter attributeHistogramConverter = new AttributeHistogramConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder, io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder> attributeHistogram_;
    private com.google.protobuf.MapFieldBuilder<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder, io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder>
        internalGetAttributeHistogram() {
      if (attributeHistogram_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(attributeHistogramConverter);
      }
      return attributeHistogram_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder, io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder>
        internalGetMutableAttributeHistogram() {
      if (attributeHistogram_ == null) {
        attributeHistogram_ = new com.google.protobuf.MapFieldBuilder<>(attributeHistogramConverter);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return attributeHistogram_;
    }
    public int getAttributeHistogramCount() {
      return internalGetAttributeHistogram().ensureBuilderMap().size();
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    @java.lang.Override
    public boolean containsAttributeHistogram(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetAttributeHistogram().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributeHistogramMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> getAttributeHistogram() {
      return getAttributeHistogramMap();
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> getAttributeHistogramMap() {
      return internalGetAttributeHistogram().getImmutableMap();
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    @java.lang.Override
    public /* nullable */
io.evitadb.externalApi.grpc.generated.GrpcHistogram getAttributeHistogramOrDefault(
        java.lang.String key,
        /* nullable */
io.evitadb.externalApi.grpc.generated.GrpcHistogram defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder> map = internalGetMutableAttributeHistogram().ensureBuilderMap();
      return map.containsKey(key) ? attributeHistogramConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    @java.lang.Override
    public io.evitadb.externalApi.grpc.generated.GrpcHistogram getAttributeHistogramOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder> map = internalGetMutableAttributeHistogram().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return attributeHistogramConverter.build(map.get(key));
    }
    public Builder clearAttributeHistogram() {
      bitField0_ = (bitField0_ & ~0x00000001);
      internalGetMutableAttributeHistogram().clear();
      return this;
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    public Builder removeAttributeHistogram(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableAttributeHistogram().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
        getMutableAttributeHistogram() {
      bitField0_ |= 0x00000001;
      return internalGetMutableAttributeHistogram().ensureMessageMap();
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    public Builder putAttributeHistogram(
        java.lang.String key,
        io.evitadb.externalApi.grpc.generated.GrpcHistogram value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableAttributeHistogram().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    public Builder putAllAttributeHistogram(
        java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> values) {
      for (java.util.Map.Entry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableAttributeHistogram().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00000001;
      return this;
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder putAttributeHistogramBuilderIfAbsent(
        java.lang.String key) {
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder> builderMap = internalGetMutableAttributeHistogram().ensureBuilderMap();
      io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = io.evitadb.externalApi.grpc.generated.GrpcHistogram.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof io.evitadb.externalApi.grpc.generated.GrpcHistogram) {
        entry = ((io.evitadb.externalApi.grpc.generated.GrpcHistogram) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder) entry;
    }

    private io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder> priceHistogramBuilder_;
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     * @return Whether the priceHistogram field is set.
     */
    public boolean hasPriceHistogram() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     * @return The priceHistogram.
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHistogram getPriceHistogram() {
      if (priceHistogramBuilder_ == null) {
        return priceHistogram_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance() : priceHistogram_;
      } else {
        return priceHistogramBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public Builder setPriceHistogram(io.evitadb.externalApi.grpc.generated.GrpcHistogram value) {
      if (priceHistogramBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        priceHistogram_ = value;
      } else {
        priceHistogramBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public Builder setPriceHistogram(
        io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder builderForValue) {
      if (priceHistogramBuilder_ == null) {
        priceHistogram_ = builderForValue.build();
      } else {
        priceHistogramBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public Builder mergePriceHistogram(io.evitadb.externalApi.grpc.generated.GrpcHistogram value) {
      if (priceHistogramBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          priceHistogram_ != null &&
          priceHistogram_ != io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance()) {
          getPriceHistogramBuilder().mergeFrom(value);
        } else {
          priceHistogram_ = value;
        }
      } else {
        priceHistogramBuilder_.mergeFrom(value);
      }
      if (priceHistogram_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public Builder clearPriceHistogram() {
      bitField0_ = (bitField0_ & ~0x00000002);
      priceHistogram_ = null;
      if (priceHistogramBuilder_ != null) {
        priceHistogramBuilder_.dispose();
        priceHistogramBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder getPriceHistogramBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getPriceHistogramFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder getPriceHistogramOrBuilder() {
      if (priceHistogramBuilder_ != null) {
        return priceHistogramBuilder_.getMessageOrBuilder();
      } else {
        return priceHistogram_ == null ?
            io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance() : priceHistogram_;
      }
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     *
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     *
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder>
        getPriceHistogramFieldBuilder() {
      if (priceHistogramBuilder_ == null) {
        priceHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder>(
                getPriceHistogram(),
                getParentForChildren(),
                isClean());
        priceHistogram_ = null;
      }
      return priceHistogramBuilder_;
    }

    private java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> facetGroupStatistics_ =
      java.util.Collections.emptyList();
    private void ensureFacetGroupStatisticsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        facetGroupStatistics_ = new java.util.ArrayList<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics>(facetGroupStatistics_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder> facetGroupStatisticsBuilder_;

    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> getFacetGroupStatisticsList() {
      if (facetGroupStatisticsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(facetGroupStatistics_);
      } else {
        return facetGroupStatisticsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public int getFacetGroupStatisticsCount() {
      if (facetGroupStatisticsBuilder_ == null) {
        return facetGroupStatistics_.size();
      } else {
        return facetGroupStatisticsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics getFacetGroupStatistics(int index) {
      if (facetGroupStatisticsBuilder_ == null) {
        return facetGroupStatistics_.get(index);
      } else {
        return facetGroupStatisticsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder setFacetGroupStatistics(
        int index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics value) {
      if (facetGroupStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFacetGroupStatisticsIsMutable();
        facetGroupStatistics_.set(index, value);
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder setFacetGroupStatistics(
        int index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder builderForValue) {
      if (facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        facetGroupStatistics_.set(index, builderForValue.build());
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addFacetGroupStatistics(io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics value) {
      if (facetGroupStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFacetGroupStatisticsIsMutable();
        facetGroupStatistics_.add(value);
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addFacetGroupStatistics(
        int index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics value) {
      if (facetGroupStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFacetGroupStatisticsIsMutable();
        facetGroupStatistics_.add(index, value);
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addFacetGroupStatistics(
        io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder builderForValue) {
      if (facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        facetGroupStatistics_.add(builderForValue.build());
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addFacetGroupStatistics(
        int index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder builderForValue) {
      if (facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        facetGroupStatistics_.add(index, builderForValue.build());
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addAllFacetGroupStatistics(
        java.lang.Iterable<? extends io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> values) {
      if (facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, facetGroupStatistics_);
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder clearFacetGroupStatistics() {
      if (facetGroupStatisticsBuilder_ == null) {
        facetGroupStatistics_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder removeFacetGroupStatistics(int index) {
      if (facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        facetGroupStatistics_.remove(index);
        onChanged();
      } else {
        facetGroupStatisticsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder getFacetGroupStatisticsBuilder(
        int index) {
      return getFacetGroupStatisticsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder getFacetGroupStatisticsOrBuilder(
        int index) {
      if (facetGroupStatisticsBuilder_ == null) {
        return facetGroupStatistics_.get(index);  } else {
        return facetGroupStatisticsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public java.util.List<? extends io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder>
         getFacetGroupStatisticsOrBuilderList() {
      if (facetGroupStatisticsBuilder_ != null) {
        return facetGroupStatisticsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(facetGroupStatistics_);
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder addFacetGroupStatisticsBuilder() {
      return getFacetGroupStatisticsFieldBuilder().addBuilder(
          io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder addFacetGroupStatisticsBuilder(
        int index) {
      return getFacetGroupStatisticsFieldBuilder().addBuilder(
          index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder>
         getFacetGroupStatisticsBuilderList() {
      return getFacetGroupStatisticsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder>
        getFacetGroupStatisticsFieldBuilder() {
      if (facetGroupStatisticsBuilder_ == null) {
        facetGroupStatisticsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder>(
                facetGroupStatistics_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        facetGroupStatistics_ = null;
      }
      return facetGroupStatisticsBuilder_;
    }

    private io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder> selfHierarchyBuilder_;
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     * @return Whether the selfHierarchy field is set.
     */
    public boolean hasSelfHierarchy() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     * @return The selfHierarchy.
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getSelfHierarchy() {
      if (selfHierarchyBuilder_ == null) {
        return selfHierarchy_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance() : selfHierarchy_;
      } else {
        return selfHierarchyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public Builder setSelfHierarchy(io.evitadb.externalApi.grpc.generated.GrpcHierarchy value) {
      if (selfHierarchyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        selfHierarchy_ = value;
      } else {
        selfHierarchyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public Builder setSelfHierarchy(
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder builderForValue) {
      if (selfHierarchyBuilder_ == null) {
        selfHierarchy_ = builderForValue.build();
      } else {
        selfHierarchyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public Builder mergeSelfHierarchy(io.evitadb.externalApi.grpc.generated.GrpcHierarchy value) {
      if (selfHierarchyBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          selfHierarchy_ != null &&
          selfHierarchy_ != io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance()) {
          getSelfHierarchyBuilder().mergeFrom(value);
        } else {
          selfHierarchy_ = value;
        }
      } else {
        selfHierarchyBuilder_.mergeFrom(value);
      }
      if (selfHierarchy_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public Builder clearSelfHierarchy() {
      bitField0_ = (bitField0_ & ~0x00000008);
      selfHierarchy_ = null;
      if (selfHierarchyBuilder_ != null) {
        selfHierarchyBuilder_.dispose();
        selfHierarchyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder getSelfHierarchyBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getSelfHierarchyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder getSelfHierarchyOrBuilder() {
      if (selfHierarchyBuilder_ != null) {
        return selfHierarchyBuilder_.getMessageOrBuilder();
      } else {
        return selfHierarchy_ == null ?
            io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance() : selfHierarchy_;
      }
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder>
        getSelfHierarchyFieldBuilder() {
      if (selfHierarchyBuilder_ == null) {
        selfHierarchyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder>(
                getSelfHierarchy(),
                getParentForChildren(),
                isClean());
        selfHierarchy_ = null;
      }
      return selfHierarchyBuilder_;
    }

    private static final class HierarchyConverter implements com.google.protobuf.MapFieldBuilder.Converter<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> {
      @java.lang.Override
      public io.evitadb.externalApi.grpc.generated.GrpcHierarchy build(io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder val) {
        if (val instanceof io.evitadb.externalApi.grpc.generated.GrpcHierarchy) { return (io.evitadb.externalApi.grpc.generated.GrpcHierarchy) val; }
        return ((io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder) val).build();
      }

      @java.lang.Override
      public com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> defaultEntry() {
        return HierarchyDefaultEntryHolder.defaultEntry;
      }
    };
    private static final HierarchyConverter hierarchyConverter = new HierarchyConverter();

    private com.google.protobuf.MapFieldBuilder<
        java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder, io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder> hierarchy_;
    private com.google.protobuf.MapFieldBuilder<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder, io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder>
        internalGetHierarchy() {
      if (hierarchy_ == null) {
        return new com.google.protobuf.MapFieldBuilder<>(hierarchyConverter);
      }
      return hierarchy_;
    }
    private com.google.protobuf.MapFieldBuilder<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder, io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder>
        internalGetMutableHierarchy() {
      if (hierarchy_ == null) {
        hierarchy_ = new com.google.protobuf.MapFieldBuilder<>(hierarchyConverter);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return hierarchy_;
    }
    public int getHierarchyCount() {
      return internalGetHierarchy().ensureBuilderMap().size();
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    @java.lang.Override
    public boolean containsHierarchy(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetHierarchy().ensureBuilderMap().containsKey(key);
    }
    /**
     * Use {@link #getHierarchyMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> getHierarchy() {
      return getHierarchyMap();
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> getHierarchyMap() {
      return internalGetHierarchy().getImmutableMap();
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    @java.lang.Override
    public /* nullable */
io.evitadb.externalApi.grpc.generated.GrpcHierarchy getHierarchyOrDefault(
        java.lang.String key,
        /* nullable */
io.evitadb.externalApi.grpc.generated.GrpcHierarchy defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder> map = internalGetMutableHierarchy().ensureBuilderMap();
      return map.containsKey(key) ? hierarchyConverter.build(map.get(key)) : defaultValue;
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    @java.lang.Override
    public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getHierarchyOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder> map = internalGetMutableHierarchy().ensureBuilderMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return hierarchyConverter.build(map.get(key));
    }
    public Builder clearHierarchy() {
      bitField0_ = (bitField0_ & ~0x00000010);
      internalGetMutableHierarchy().clear();
      return this;
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    public Builder removeHierarchy(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableHierarchy().ensureBuilderMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
        getMutableHierarchy() {
      bitField0_ |= 0x00000010;
      return internalGetMutableHierarchy().ensureMessageMap();
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    public Builder putHierarchy(
        java.lang.String key,
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableHierarchy().ensureBuilderMap()
          .put(key, value);
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    public Builder putAllHierarchy(
        java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> values) {
      for (java.util.Map.Entry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> e : values.entrySet()) {
        if (e.getKey() == null || e.getValue() == null) {
          throw new NullPointerException();
        }
      }
      internalGetMutableHierarchy().ensureBuilderMap()
          .putAll(values);
      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder putHierarchyBuilderIfAbsent(
        java.lang.String key) {
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder> builderMap = internalGetMutableHierarchy().ensureBuilderMap();
      io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder entry = builderMap.get(key);
      if (entry == null) {
        entry = io.evitadb.externalApi.grpc.generated.GrpcHierarchy.newBuilder();
        builderMap.put(key, entry);
      }
      if (entry instanceof io.evitadb.externalApi.grpc.generated.GrpcHierarchy) {
        entry = ((io.evitadb.externalApi.grpc.generated.GrpcHierarchy) entry).toBuilder();
        builderMap.put(key, entry);
      }
      return (io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder) entry;
    }

    private io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder> queryTelemetryBuilder_;
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     * @return Whether the queryTelemetry field is set.
     */
    public boolean hasQueryTelemetry() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     * @return The queryTelemetry.
     */
    public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry getQueryTelemetry() {
      if (queryTelemetryBuilder_ == null) {
        return queryTelemetry_ == null ? io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.getDefaultInstance() : queryTelemetry_;
      } else {
        return queryTelemetryBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public Builder setQueryTelemetry(io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry value) {
      if (queryTelemetryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        queryTelemetry_ = value;
      } else {
        queryTelemetryBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public Builder setQueryTelemetry(
        io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder builderForValue) {
      if (queryTelemetryBuilder_ == null) {
        queryTelemetry_ = builderForValue.build();
      } else {
        queryTelemetryBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public Builder mergeQueryTelemetry(io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry value) {
      if (queryTelemetryBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          queryTelemetry_ != null &&
          queryTelemetry_ != io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.getDefaultInstance()) {
          getQueryTelemetryBuilder().mergeFrom(value);
        } else {
          queryTelemetry_ = value;
        }
      } else {
        queryTelemetryBuilder_.mergeFrom(value);
      }
      if (queryTelemetry_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public Builder clearQueryTelemetry() {
      bitField0_ = (bitField0_ & ~0x00000020);
      queryTelemetry_ = null;
      if (queryTelemetryBuilder_ != null) {
        queryTelemetryBuilder_.dispose();
        queryTelemetryBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder getQueryTelemetryBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getQueryTelemetryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder getQueryTelemetryOrBuilder() {
      if (queryTelemetryBuilder_ != null) {
        return queryTelemetryBuilder_.getMessageOrBuilder();
      } else {
        return queryTelemetry_ == null ?
            io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.getDefaultInstance() : queryTelemetry_;
      }
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder>
        getQueryTelemetryFieldBuilder() {
      if (queryTelemetryBuilder_ == null) {
        queryTelemetryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder>(
                getQueryTelemetry(),
                getParentForChildren(),
                isClean());
        queryTelemetry_ = null;
      }
      return queryTelemetryBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:io.evitadb.externalApi.grpc.generated.GrpcExtraResults)
  }

  // @@protoc_insertion_point(class_scope:io.evitadb.externalApi.grpc.generated.GrpcExtraResults)
  private static final io.evitadb.externalApi.grpc.generated.GrpcExtraResults DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.evitadb.externalApi.grpc.generated.GrpcExtraResults();
  }

  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GrpcExtraResults>
      PARSER = new com.google.protobuf.AbstractParser<GrpcExtraResults>() {
    @java.lang.Override
    public GrpcExtraResults parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<GrpcExtraResults> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GrpcExtraResults> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcExtraResults getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

