/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2025
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcExtraResults.proto

package io.evitadb.externalApi.grpc.generated;

/**
 * <pre>
 * This DTO contains extra results that are computed based on the query results.
 * </pre>
 *
 * Protobuf type {@code io.evitadb.externalApi.grpc.generated.GrpcExtraResults}
 */
public final class GrpcExtraResults extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:io.evitadb.externalApi.grpc.generated.GrpcExtraResults)
    GrpcExtraResultsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GrpcExtraResults.newBuilder() to construct.
  private GrpcExtraResults(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GrpcExtraResults() {
    this.facetGroupStatistics_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new GrpcExtraResults();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private GrpcExtraResults(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              this.attributeHistogram_ = com.google.protobuf.MapField.newMapField(
                  AttributeHistogramDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
            attributeHistogram__ = input.readMessage(
                AttributeHistogramDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            this.attributeHistogram_.getMutableMap().put(
                attributeHistogram__.getKey(), attributeHistogram__.getValue());
            break;
          }
          case 18: {
            io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder subBuilder = null;
            if (this.priceHistogram_ != null) {
              subBuilder = this.priceHistogram_.toBuilder();
            }
            this.priceHistogram_ = input.readMessage(io.evitadb.externalApi.grpc.generated.GrpcHistogram.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(this.priceHistogram_);
              this.priceHistogram_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              this.facetGroupStatistics_ = new java.util.ArrayList<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics>();
              mutable_bitField0_ |= 0x00000002;
            }
            this.facetGroupStatistics_.add(
                input.readMessage(io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.parser(), extensionRegistry));
            break;
          }
          case 34: {
            io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder subBuilder = null;
            if (this.selfHierarchy_ != null) {
              subBuilder = this.selfHierarchy_.toBuilder();
            }
            this.selfHierarchy_ = input.readMessage(io.evitadb.externalApi.grpc.generated.GrpcHierarchy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(this.selfHierarchy_);
              this.selfHierarchy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              this.hierarchy_ = com.google.protobuf.MapField.newMapField(
                  HierarchyDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000004;
            }
            com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
            hierarchy__ = input.readMessage(
                HierarchyDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            this.hierarchy_.getMutableMap().put(
                hierarchy__.getKey(), hierarchy__.getValue());
            break;
          }
          case 50: {
            io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder subBuilder = null;
            if (this.queryTelemetry_ != null) {
              subBuilder = this.queryTelemetry_.toBuilder();
            }
            this.queryTelemetry_ = input.readMessage(io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(this.queryTelemetry_);
              this.queryTelemetry_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        this.facetGroupStatistics_ = java.util.Collections.unmodifiableList(this.facetGroupStatistics_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetAttributeHistogram();
      case 5:
        return internalGetHierarchy();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.evitadb.externalApi.grpc.generated.GrpcExtraResults.class, io.evitadb.externalApi.grpc.generated.GrpcExtraResults.Builder.class);
  }

  public static final int ATTRIBUTEHISTOGRAM_FIELD_NUMBER = 1;
  private static final class AttributeHistogramDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>newDefaultInstance(
                io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_AttributeHistogramEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> attributeHistogram_;
  private com.google.protobuf.MapField<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
  internalGetAttributeHistogram() {
    if (this.attributeHistogram_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          AttributeHistogramDefaultEntryHolder.defaultEntry);
    }
    return this.attributeHistogram_;
  }

  public int getAttributeHistogramCount() {
    return internalGetAttributeHistogram().getMap().size();
  }
  /**
   * <pre>
   * Returns computed histograms for specific attributes based on filter constraints.
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
   */

  @java.lang.Override
  public boolean containsAttributeHistogram(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetAttributeHistogram().getMap().containsKey(key);
  }
  /**
   * Use {@link #getAttributeHistogramMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> getAttributeHistogram() {
    return getAttributeHistogramMap();
  }
  /**
   * <pre>
   * Returns computed histograms for specific attributes based on filter constraints.
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> getAttributeHistogramMap() {
    return internalGetAttributeHistogram().getMap();
  }
  /**
   * <pre>
   * Returns computed histograms for specific attributes based on filter constraints.
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
   */
  @java.lang.Override

  public io.evitadb.externalApi.grpc.generated.GrpcHistogram getAttributeHistogramOrDefault(
      java.lang.String key,
      io.evitadb.externalApi.grpc.generated.GrpcHistogram defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> map =
        internalGetAttributeHistogram().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Returns computed histograms for specific attributes based on filter constraints.
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
   */
  @java.lang.Override

  public io.evitadb.externalApi.grpc.generated.GrpcHistogram getAttributeHistogramOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> map =
        internalGetAttributeHistogram().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int PRICEHISTOGRAM_FIELD_NUMBER = 2;
  private io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram_;
  /**
   * <pre>
   * Returns computed histogram for prices satisfactory to filter constraints.
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
   * @return Whether the priceHistogram field is set.
   */
  @java.lang.Override
  public boolean hasPriceHistogram() {
    return this.priceHistogram_ != null;
  }
  /**
   * <pre>
   * Returns computed histogram for prices satisfactory to filter constraints.
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
   * @return The priceHistogram.
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHistogram getPriceHistogram() {
    return this.priceHistogram_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance() : this.priceHistogram_;
  }
  /**
   * <pre>
   * Returns computed histogram for prices satisfactory to filter constraints.
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder getPriceHistogramOrBuilder() {
    return getPriceHistogram();
  }

  public static final int FACETGROUPSTATISTICS_FIELD_NUMBER = 3;
  private java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> facetGroupStatistics_;
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> getFacetGroupStatisticsList() {
    return this.facetGroupStatistics_;
  }
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder>
      getFacetGroupStatisticsOrBuilderList() {
    return this.facetGroupStatistics_;
  }
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public int getFacetGroupStatisticsCount() {
    return this.facetGroupStatistics_.size();
  }
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics getFacetGroupStatistics(int index) {
    return this.facetGroupStatistics_.get(index);
  }
  /**
   * <pre>
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   * </pre>
   *
   * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder getFacetGroupStatisticsOrBuilder(
      int index) {
    return this.facetGroupStatistics_.get(index);
  }

  public static final int SELFHIERARCHY_FIELD_NUMBER = 4;
  private io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy_;
  /**
   * <pre>
   * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
   * the queried hierarchy entity.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
   * @return Whether the selfHierarchy field is set.
   */
  @java.lang.Override
  public boolean hasSelfHierarchy() {
    return this.selfHierarchy_ != null;
  }
  /**
   * <pre>
   * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
   * the queried hierarchy entity.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
   * @return The selfHierarchy.
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getSelfHierarchy() {
    return this.selfHierarchy_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance() : this.selfHierarchy_;
  }
  /**
   * <pre>
   * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
   * the queried hierarchy entity.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder getSelfHierarchyOrBuilder() {
    return getSelfHierarchy();
  }

  public static final int HIERARCHY_FIELD_NUMBER = 5;
  private static final class HierarchyDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>newDefaultInstance(
                io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_HierarchyEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> hierarchy_;
  private com.google.protobuf.MapField<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
  internalGetHierarchy() {
    if (this.hierarchy_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          HierarchyDefaultEntryHolder.defaultEntry);
    }
    return this.hierarchy_;
  }

  public int getHierarchyCount() {
    return internalGetHierarchy().getMap().size();
  }
  /**
   * <pre>
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
   */

  @java.lang.Override
  public boolean containsHierarchy(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetHierarchy().getMap().containsKey(key);
  }
  /**
   * Use {@link #getHierarchyMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> getHierarchy() {
    return getHierarchyMap();
  }
  /**
   * <pre>
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> getHierarchyMap() {
    return internalGetHierarchy().getMap();
  }
  /**
   * <pre>
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
   */
  @java.lang.Override

  public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getHierarchyOrDefault(
      java.lang.String key,
      io.evitadb.externalApi.grpc.generated.GrpcHierarchy defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> map =
        internalGetHierarchy().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   * </pre>
   *
   * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
   */
  @java.lang.Override

  public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getHierarchyOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> map =
        internalGetHierarchy().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int QUERYTELEMETRY_FIELD_NUMBER = 6;
  private io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry_;
  /**
   * <pre>
   * This DTO contains detailed information about query processing time and its decomposition to single operations.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
   * @return Whether the queryTelemetry field is set.
   */
  @java.lang.Override
  public boolean hasQueryTelemetry() {
    return this.queryTelemetry_ != null;
  }
  /**
   * <pre>
   * This DTO contains detailed information about query processing time and its decomposition to single operations.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
   * @return The queryTelemetry.
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry getQueryTelemetry() {
    return this.queryTelemetry_ == null ? io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.getDefaultInstance() : this.queryTelemetry_;
  }
  /**
   * <pre>
   * This DTO contains detailed information about query processing time and its decomposition to single operations.
   * </pre>
   *
   * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
   */
  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder getQueryTelemetryOrBuilder() {
    return getQueryTelemetry();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = this.memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    this.memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetAttributeHistogram(),
        AttributeHistogramDefaultEntryHolder.defaultEntry,
        1);
    if (this.priceHistogram_ != null) {
      output.writeMessage(2, getPriceHistogram());
    }
    for (int i = 0; i < this.facetGroupStatistics_.size(); i++) {
      output.writeMessage(3, this.facetGroupStatistics_.get(i));
    }
    if (this.selfHierarchy_ != null) {
      output.writeMessage(4, getSelfHierarchy());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetHierarchy(),
        HierarchyDefaultEntryHolder.defaultEntry,
        5);
    if (this.queryTelemetry_ != null) {
      output.writeMessage(6, getQueryTelemetry());
    }
    this.unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = this.memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> entry
         : internalGetAttributeHistogram().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
      attributeHistogram__ = AttributeHistogramDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, attributeHistogram__);
    }
    if (this.priceHistogram_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getPriceHistogram());
    }
    for (int i = 0; i < this.facetGroupStatistics_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, this.facetGroupStatistics_.get(i));
    }
    if (this.selfHierarchy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getSelfHierarchy());
    }
    for (java.util.Map.Entry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> entry
         : internalGetHierarchy().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
      hierarchy__ = HierarchyDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, hierarchy__);
    }
    if (this.queryTelemetry_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getQueryTelemetry());
    }
    size += this.unknownFields.getSerializedSize();
    this.memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.evitadb.externalApi.grpc.generated.GrpcExtraResults)) {
      return super.equals(obj);
    }
    io.evitadb.externalApi.grpc.generated.GrpcExtraResults other = (io.evitadb.externalApi.grpc.generated.GrpcExtraResults) obj;

    if (!internalGetAttributeHistogram().equals(
        other.internalGetAttributeHistogram())) return false;
    if (hasPriceHistogram() != other.hasPriceHistogram()) return false;
    if (hasPriceHistogram()) {
      if (!getPriceHistogram()
          .equals(other.getPriceHistogram())) return false;
    }
    if (!getFacetGroupStatisticsList()
        .equals(other.getFacetGroupStatisticsList())) return false;
    if (hasSelfHierarchy() != other.hasSelfHierarchy()) return false;
    if (hasSelfHierarchy()) {
      if (!getSelfHierarchy()
          .equals(other.getSelfHierarchy())) return false;
    }
    if (!internalGetHierarchy().equals(
        other.internalGetHierarchy())) return false;
    if (hasQueryTelemetry() != other.hasQueryTelemetry()) return false;
    if (hasQueryTelemetry()) {
      if (!getQueryTelemetry()
          .equals(other.getQueryTelemetry())) return false;
    }
    if (!this.unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (this.memoizedHashCode != 0) {
      return this.memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetAttributeHistogram().getMap().isEmpty()) {
      hash = (37 * hash) + ATTRIBUTEHISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + internalGetAttributeHistogram().hashCode();
    }
    if (hasPriceHistogram()) {
      hash = (37 * hash) + PRICEHISTOGRAM_FIELD_NUMBER;
      hash = (53 * hash) + getPriceHistogram().hashCode();
    }
    if (getFacetGroupStatisticsCount() > 0) {
      hash = (37 * hash) + FACETGROUPSTATISTICS_FIELD_NUMBER;
      hash = (53 * hash) + getFacetGroupStatisticsList().hashCode();
    }
    if (hasSelfHierarchy()) {
      hash = (37 * hash) + SELFHIERARCHY_FIELD_NUMBER;
      hash = (53 * hash) + getSelfHierarchy().hashCode();
    }
    if (!internalGetHierarchy().getMap().isEmpty()) {
      hash = (37 * hash) + HIERARCHY_FIELD_NUMBER;
      hash = (53 * hash) + internalGetHierarchy().hashCode();
    }
    if (hasQueryTelemetry()) {
      hash = (37 * hash) + QUERYTELEMETRY_FIELD_NUMBER;
      hash = (53 * hash) + getQueryTelemetry().hashCode();
    }
    hash = (29 * hash) + this.unknownFields.hashCode();
    this.memoizedHashCode = hash;
    return hash;
  }

  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.evitadb.externalApi.grpc.generated.GrpcExtraResults prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * This DTO contains extra results that are computed based on the query results.
   * </pre>
   *
   * Protobuf type {@code io.evitadb.externalApi.grpc.generated.GrpcExtraResults}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:io.evitadb.externalApi.grpc.generated.GrpcExtraResults)
      io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetAttributeHistogram();
        case 5:
          return internalGetHierarchy();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableAttributeHistogram();
        case 5:
          return internalGetMutableHierarchy();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.evitadb.externalApi.grpc.generated.GrpcExtraResults.class, io.evitadb.externalApi.grpc.generated.GrpcExtraResults.Builder.class);
    }

    // Construct using io.evitadb.externalApi.grpc.generated.GrpcExtraResults.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getFacetGroupStatisticsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      internalGetMutableAttributeHistogram().clear();
      if (this.priceHistogramBuilder_ == null) {
        this.priceHistogram_ = null;
      } else {
        this.priceHistogram_ = null;
        this.priceHistogramBuilder_ = null;
      }
      if (this.facetGroupStatisticsBuilder_ == null) {
        this.facetGroupStatistics_ = java.util.Collections.emptyList();
        this.bitField0_ = (this.bitField0_ & ~0x00000002);
      } else {
        this.facetGroupStatisticsBuilder_.clear();
      }
      if (this.selfHierarchyBuilder_ == null) {
        this.selfHierarchy_ = null;
      } else {
        this.selfHierarchy_ = null;
        this.selfHierarchyBuilder_ = null;
      }
      internalGetMutableHierarchy().clear();
      if (this.queryTelemetryBuilder_ == null) {
        this.queryTelemetry_ = null;
      } else {
        this.queryTelemetry_ = null;
        this.queryTelemetryBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.evitadb.externalApi.grpc.generated.GrpcExtraResultsOuterClass.internal_static_io_evitadb_externalApi_grpc_generated_GrpcExtraResults_descriptor;
    }

    @java.lang.Override
    public io.evitadb.externalApi.grpc.generated.GrpcExtraResults getDefaultInstanceForType() {
      return io.evitadb.externalApi.grpc.generated.GrpcExtraResults.getDefaultInstance();
    }

    @java.lang.Override
    public io.evitadb.externalApi.grpc.generated.GrpcExtraResults build() {
      io.evitadb.externalApi.grpc.generated.GrpcExtraResults result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.evitadb.externalApi.grpc.generated.GrpcExtraResults buildPartial() {
      io.evitadb.externalApi.grpc.generated.GrpcExtraResults result = new io.evitadb.externalApi.grpc.generated.GrpcExtraResults(this);
      int from_bitField0_ = this.bitField0_;
      result.attributeHistogram_ = internalGetAttributeHistogram();
      result.attributeHistogram_.makeImmutable();
      if (this.priceHistogramBuilder_ == null) {
        result.priceHistogram_ = this.priceHistogram_;
      } else {
        result.priceHistogram_ = this.priceHistogramBuilder_.build();
      }
      if (this.facetGroupStatisticsBuilder_ == null) {
        if (((this.bitField0_ & 0x00000002) != 0)) {
          this.facetGroupStatistics_ = java.util.Collections.unmodifiableList(this.facetGroupStatistics_);
          this.bitField0_ = (this.bitField0_ & ~0x00000002);
        }
        result.facetGroupStatistics_ = this.facetGroupStatistics_;
      } else {
        result.facetGroupStatistics_ = this.facetGroupStatisticsBuilder_.build();
      }
      if (this.selfHierarchyBuilder_ == null) {
        result.selfHierarchy_ = this.selfHierarchy_;
      } else {
        result.selfHierarchy_ = this.selfHierarchyBuilder_.build();
      }
      result.hierarchy_ = internalGetHierarchy();
      result.hierarchy_.makeImmutable();
      if (this.queryTelemetryBuilder_ == null) {
        result.queryTelemetry_ = this.queryTelemetry_;
      } else {
        result.queryTelemetry_ = this.queryTelemetryBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.evitadb.externalApi.grpc.generated.GrpcExtraResults) {
        return mergeFrom((io.evitadb.externalApi.grpc.generated.GrpcExtraResults)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.evitadb.externalApi.grpc.generated.GrpcExtraResults other) {
      if (other == io.evitadb.externalApi.grpc.generated.GrpcExtraResults.getDefaultInstance()) return this;
      internalGetMutableAttributeHistogram().mergeFrom(
          other.internalGetAttributeHistogram());
      if (other.hasPriceHistogram()) {
        mergePriceHistogram(other.getPriceHistogram());
      }
      if (this.facetGroupStatisticsBuilder_ == null) {
        if (!other.facetGroupStatistics_.isEmpty()) {
          if (this.facetGroupStatistics_.isEmpty()) {
            this.facetGroupStatistics_ = other.facetGroupStatistics_;
            this.bitField0_ = (this.bitField0_ & ~0x00000002);
          } else {
            ensureFacetGroupStatisticsIsMutable();
            this.facetGroupStatistics_.addAll(other.facetGroupStatistics_);
          }
          onChanged();
        }
      } else {
        if (!other.facetGroupStatistics_.isEmpty()) {
          if (this.facetGroupStatisticsBuilder_.isEmpty()) {
            this.facetGroupStatisticsBuilder_.dispose();
            this.facetGroupStatisticsBuilder_ = null;
            this.facetGroupStatistics_ = other.facetGroupStatistics_;
            this.bitField0_ = (this.bitField0_ & ~0x00000002);
            this.facetGroupStatisticsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFacetGroupStatisticsFieldBuilder() : null;
          } else {
            this.facetGroupStatisticsBuilder_.addAllMessages(other.facetGroupStatistics_);
          }
        }
      }
      if (other.hasSelfHierarchy()) {
        mergeSelfHierarchy(other.getSelfHierarchy());
      }
      internalGetMutableHierarchy().mergeFrom(
          other.internalGetHierarchy());
      if (other.hasQueryTelemetry()) {
        mergeQueryTelemetry(other.getQueryTelemetry());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.evitadb.externalApi.grpc.generated.GrpcExtraResults parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.evitadb.externalApi.grpc.generated.GrpcExtraResults) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> attributeHistogram_;
    private com.google.protobuf.MapField<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
    internalGetAttributeHistogram() {
      if (this.attributeHistogram_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttributeHistogramDefaultEntryHolder.defaultEntry);
      }
      return this.attributeHistogram_;
    }
    private com.google.protobuf.MapField<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
    internalGetMutableAttributeHistogram() {
      onChanged();;
      if (this.attributeHistogram_ == null) {
        this.attributeHistogram_ = com.google.protobuf.MapField.newMapField(
            AttributeHistogramDefaultEntryHolder.defaultEntry);
      }
      if (!this.attributeHistogram_.isMutable()) {
        this.attributeHistogram_ = this.attributeHistogram_.copy();
      }
      return this.attributeHistogram_;
    }

    public int getAttributeHistogramCount() {
      return internalGetAttributeHistogram().getMap().size();
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */

    @java.lang.Override
    public boolean containsAttributeHistogram(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetAttributeHistogram().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributeHistogramMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> getAttributeHistogram() {
      return getAttributeHistogramMap();
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> getAttributeHistogramMap() {
      return internalGetAttributeHistogram().getMap();
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    @java.lang.Override

    public io.evitadb.externalApi.grpc.generated.GrpcHistogram getAttributeHistogramOrDefault(
        java.lang.String key,
        io.evitadb.externalApi.grpc.generated.GrpcHistogram defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> map =
          internalGetAttributeHistogram().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    @java.lang.Override

    public io.evitadb.externalApi.grpc.generated.GrpcHistogram getAttributeHistogramOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> map =
          internalGetAttributeHistogram().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearAttributeHistogram() {
      internalGetMutableAttributeHistogram().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */

    public Builder removeAttributeHistogram(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableAttributeHistogram().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram>
    getMutableAttributeHistogram() {
      return internalGetMutableAttributeHistogram().getMutableMap();
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */
    public Builder putAttributeHistogram(
        java.lang.String key,
        io.evitadb.externalApi.grpc.generated.GrpcHistogram value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableAttributeHistogram().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Returns computed histograms for specific attributes based on filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHistogram&gt; attributeHistogram = 1;</code>
     */

    public Builder putAllAttributeHistogram(
        java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHistogram> values) {
      internalGetMutableAttributeHistogram().getMutableMap()
          .putAll(values);
      return this;
    }

    private io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder> priceHistogramBuilder_;
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     * @return Whether the priceHistogram field is set.
     */
    public boolean hasPriceHistogram() {
      return this.priceHistogramBuilder_ != null || this.priceHistogram_ != null;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     * @return The priceHistogram.
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHistogram getPriceHistogram() {
      if (this.priceHistogramBuilder_ == null) {
        return this.priceHistogram_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance() : this.priceHistogram_;
      } else {
        return this.priceHistogramBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public Builder setPriceHistogram(io.evitadb.externalApi.grpc.generated.GrpcHistogram value) {
      if (this.priceHistogramBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        this.priceHistogram_ = value;
        onChanged();
      } else {
        this.priceHistogramBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public Builder setPriceHistogram(
        io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder builderForValue) {
      if (this.priceHistogramBuilder_ == null) {
        this.priceHistogram_ = builderForValue.build();
        onChanged();
      } else {
        this.priceHistogramBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public Builder mergePriceHistogram(io.evitadb.externalApi.grpc.generated.GrpcHistogram value) {
      if (this.priceHistogramBuilder_ == null) {
        if (this.priceHistogram_ != null) {
          this.priceHistogram_ =
            io.evitadb.externalApi.grpc.generated.GrpcHistogram.newBuilder(this.priceHistogram_).mergeFrom(value).buildPartial();
        } else {
          this.priceHistogram_ = value;
        }
        onChanged();
      } else {
        this.priceHistogramBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public Builder clearPriceHistogram() {
      if (this.priceHistogramBuilder_ == null) {
        this.priceHistogram_ = null;
        onChanged();
      } else {
        this.priceHistogram_ = null;
        this.priceHistogramBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder getPriceHistogramBuilder() {

      onChanged();
      return getPriceHistogramFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder getPriceHistogramOrBuilder() {
      if (this.priceHistogramBuilder_ != null) {
        return this.priceHistogramBuilder_.getMessageOrBuilder();
      } else {
        return this.priceHistogram_ == null ?
            io.evitadb.externalApi.grpc.generated.GrpcHistogram.getDefaultInstance() : this.priceHistogram_;
      }
    }
    /**
     * <pre>
     * Returns computed histogram for prices satisfactory to filter constraints.
     * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
     * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
     * Histogram can be computed only for numeric based properties. It visualises which property values are more common
     * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
     * `requestedCount` but there
     * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
     * there are as few "empty buckets" as possible.
     * - buckets are defined by their lower bounds (inclusive)
     * - the upper bound is the lower bound of the next bucket
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder>
        getPriceHistogramFieldBuilder() {
      if (this.priceHistogramBuilder_ == null) {
        this.priceHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.evitadb.externalApi.grpc.generated.GrpcHistogram, io.evitadb.externalApi.grpc.generated.GrpcHistogram.Builder, io.evitadb.externalApi.grpc.generated.GrpcHistogramOrBuilder>(
                getPriceHistogram(),
                getParentForChildren(),
                isClean());
        this.priceHistogram_ = null;
      }
      return this.priceHistogramBuilder_;
    }

    private java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> facetGroupStatistics_ =
      java.util.Collections.emptyList();
    private void ensureFacetGroupStatisticsIsMutable() {
      if (!((this.bitField0_ & 0x00000002) != 0)) {
        this.facetGroupStatistics_ = new java.util.ArrayList<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics>(this.facetGroupStatistics_);
        this.bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder> facetGroupStatisticsBuilder_;

    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> getFacetGroupStatisticsList() {
      if (this.facetGroupStatisticsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(this.facetGroupStatistics_);
      } else {
        return this.facetGroupStatisticsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public int getFacetGroupStatisticsCount() {
      if (this.facetGroupStatisticsBuilder_ == null) {
        return this.facetGroupStatistics_.size();
      } else {
        return this.facetGroupStatisticsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics getFacetGroupStatistics(int index) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        return this.facetGroupStatistics_.get(index);
      } else {
        return this.facetGroupStatisticsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder setFacetGroupStatistics(
        int index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics value) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFacetGroupStatisticsIsMutable();
        this.facetGroupStatistics_.set(index, value);
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder setFacetGroupStatistics(
        int index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder builderForValue) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        this.facetGroupStatistics_.set(index, builderForValue.build());
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addFacetGroupStatistics(io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics value) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFacetGroupStatisticsIsMutable();
        this.facetGroupStatistics_.add(value);
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addFacetGroupStatistics(
        int index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics value) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFacetGroupStatisticsIsMutable();
        this.facetGroupStatistics_.add(index, value);
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addFacetGroupStatistics(
        io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder builderForValue) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        this.facetGroupStatistics_.add(builderForValue.build());
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addFacetGroupStatistics(
        int index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder builderForValue) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        this.facetGroupStatistics_.add(index, builderForValue.build());
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder addAllFacetGroupStatistics(
        java.lang.Iterable<? extends io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics> values) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, this.facetGroupStatistics_);
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder clearFacetGroupStatistics() {
      if (this.facetGroupStatisticsBuilder_ == null) {
        this.facetGroupStatistics_ = java.util.Collections.emptyList();
        this.bitField0_ = (this.bitField0_ & ~0x00000002);
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public Builder removeFacetGroupStatistics(int index) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        ensureFacetGroupStatisticsIsMutable();
        this.facetGroupStatistics_.remove(index);
        onChanged();
      } else {
        this.facetGroupStatisticsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder getFacetGroupStatisticsBuilder(
        int index) {
      return getFacetGroupStatisticsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder getFacetGroupStatisticsOrBuilder(
        int index) {
      if (this.facetGroupStatisticsBuilder_ == null) {
        return this.facetGroupStatistics_.get(index);  } else {
        return this.facetGroupStatisticsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public java.util.List<? extends io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder>
         getFacetGroupStatisticsOrBuilderList() {
      if (this.facetGroupStatisticsBuilder_ != null) {
        return this.facetGroupStatisticsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(this.facetGroupStatistics_);
      }
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder addFacetGroupStatisticsBuilder() {
      return getFacetGroupStatisticsFieldBuilder().addBuilder(
          io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder addFacetGroupStatisticsBuilder(
        int index) {
      return getFacetGroupStatisticsFieldBuilder().addBuilder(
          index, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.getDefaultInstance());
    }
    /**
     * <pre>
     * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
     * (if they belong in one) and statistics of the facets that relates to it.
     * </pre>
     *
     * <code>repeated .io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;</code>
     */
    public java.util.List<io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder>
         getFacetGroupStatisticsBuilderList() {
      return getFacetGroupStatisticsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder>
        getFacetGroupStatisticsFieldBuilder() {
      if (this.facetGroupStatisticsBuilder_ == null) {
        this.facetGroupStatisticsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.Builder, io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatisticsOrBuilder>(
                this.facetGroupStatistics_,
                ((this.bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        this.facetGroupStatistics_ = null;
      }
      return this.facetGroupStatisticsBuilder_;
    }

    private io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder> selfHierarchyBuilder_;
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     * @return Whether the selfHierarchy field is set.
     */
    public boolean hasSelfHierarchy() {
      return this.selfHierarchyBuilder_ != null || this.selfHierarchy_ != null;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     * @return The selfHierarchy.
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getSelfHierarchy() {
      if (this.selfHierarchyBuilder_ == null) {
        return this.selfHierarchy_ == null ? io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance() : this.selfHierarchy_;
      } else {
        return this.selfHierarchyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public Builder setSelfHierarchy(io.evitadb.externalApi.grpc.generated.GrpcHierarchy value) {
      if (this.selfHierarchyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        this.selfHierarchy_ = value;
        onChanged();
      } else {
        this.selfHierarchyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public Builder setSelfHierarchy(
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder builderForValue) {
      if (this.selfHierarchyBuilder_ == null) {
        this.selfHierarchy_ = builderForValue.build();
        onChanged();
      } else {
        this.selfHierarchyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public Builder mergeSelfHierarchy(io.evitadb.externalApi.grpc.generated.GrpcHierarchy value) {
      if (this.selfHierarchyBuilder_ == null) {
        if (this.selfHierarchy_ != null) {
          this.selfHierarchy_ =
            io.evitadb.externalApi.grpc.generated.GrpcHierarchy.newBuilder(this.selfHierarchy_).mergeFrom(value).buildPartial();
        } else {
          this.selfHierarchy_ = value;
        }
        onChanged();
      } else {
        this.selfHierarchyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public Builder clearSelfHierarchy() {
      if (this.selfHierarchyBuilder_ == null) {
        this.selfHierarchy_ = null;
        onChanged();
      } else {
        this.selfHierarchy_ = null;
        this.selfHierarchyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder getSelfHierarchyBuilder() {

      onChanged();
      return getSelfHierarchyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder getSelfHierarchyOrBuilder() {
      if (this.selfHierarchyBuilder_ != null) {
        return this.selfHierarchyBuilder_.getMessageOrBuilder();
      } else {
        return this.selfHierarchy_ == null ?
            io.evitadb.externalApi.grpc.generated.GrpcHierarchy.getDefaultInstance() : this.selfHierarchy_;
      }
    }
    /**
     * <pre>
     * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
     * the queried hierarchy entity.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder>
        getSelfHierarchyFieldBuilder() {
      if (this.selfHierarchyBuilder_ == null) {
        this.selfHierarchyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.evitadb.externalApi.grpc.generated.GrpcHierarchy, io.evitadb.externalApi.grpc.generated.GrpcHierarchy.Builder, io.evitadb.externalApi.grpc.generated.GrpcHierarchyOrBuilder>(
                getSelfHierarchy(),
                getParentForChildren(),
                isClean());
        this.selfHierarchy_ = null;
      }
      return this.selfHierarchyBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> hierarchy_;
    private com.google.protobuf.MapField<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
    internalGetHierarchy() {
      if (this.hierarchy_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            HierarchyDefaultEntryHolder.defaultEntry);
      }
      return this.hierarchy_;
    }
    private com.google.protobuf.MapField<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
    internalGetMutableHierarchy() {
      onChanged();;
      if (this.hierarchy_ == null) {
        this.hierarchy_ = com.google.protobuf.MapField.newMapField(
            HierarchyDefaultEntryHolder.defaultEntry);
      }
      if (!this.hierarchy_.isMutable()) {
        this.hierarchy_ = this.hierarchy_.copy();
      }
      return this.hierarchy_;
    }

    public int getHierarchyCount() {
      return internalGetHierarchy().getMap().size();
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */

    @java.lang.Override
    public boolean containsHierarchy(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetHierarchy().getMap().containsKey(key);
    }
    /**
     * Use {@link #getHierarchyMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> getHierarchy() {
      return getHierarchyMap();
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> getHierarchyMap() {
      return internalGetHierarchy().getMap();
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    @java.lang.Override

    public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getHierarchyOrDefault(
        java.lang.String key,
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> map =
          internalGetHierarchy().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    @java.lang.Override

    public io.evitadb.externalApi.grpc.generated.GrpcHierarchy getHierarchyOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> map =
          internalGetHierarchy().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearHierarchy() {
      internalGetMutableHierarchy().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */

    public Builder removeHierarchy(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableHierarchy().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy>
    getMutableHierarchy() {
      return internalGetMutableHierarchy().getMutableMap();
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */
    public Builder putHierarchy(
        java.lang.String key,
        io.evitadb.externalApi.grpc.generated.GrpcHierarchy value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableHierarchy().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Index holds the statistics for particular references that target hierarchy entity types.
     * Key is the identification of the reference name, value contains list of statistics for the single level (probably
     * root or whatever is filtered by the query) of the hierarchy entity.
     * </pre>
     *
     * <code>map&lt;string, .io.evitadb.externalApi.grpc.generated.GrpcHierarchy&gt; hierarchy = 5;</code>
     */

    public Builder putAllHierarchy(
        java.util.Map<java.lang.String, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> values) {
      internalGetMutableHierarchy().getMutableMap()
          .putAll(values);
      return this;
    }

    private io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder> queryTelemetryBuilder_;
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     * @return Whether the queryTelemetry field is set.
     */
    public boolean hasQueryTelemetry() {
      return this.queryTelemetryBuilder_ != null || this.queryTelemetry_ != null;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     * @return The queryTelemetry.
     */
    public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry getQueryTelemetry() {
      if (this.queryTelemetryBuilder_ == null) {
        return this.queryTelemetry_ == null ? io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.getDefaultInstance() : this.queryTelemetry_;
      } else {
        return this.queryTelemetryBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public Builder setQueryTelemetry(io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry value) {
      if (this.queryTelemetryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        this.queryTelemetry_ = value;
        onChanged();
      } else {
        this.queryTelemetryBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public Builder setQueryTelemetry(
        io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder builderForValue) {
      if (this.queryTelemetryBuilder_ == null) {
        this.queryTelemetry_ = builderForValue.build();
        onChanged();
      } else {
        this.queryTelemetryBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public Builder mergeQueryTelemetry(io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry value) {
      if (this.queryTelemetryBuilder_ == null) {
        if (this.queryTelemetry_ != null) {
          this.queryTelemetry_ =
            io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.newBuilder(this.queryTelemetry_).mergeFrom(value).buildPartial();
        } else {
          this.queryTelemetry_ = value;
        }
        onChanged();
      } else {
        this.queryTelemetryBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public Builder clearQueryTelemetry() {
      if (this.queryTelemetryBuilder_ == null) {
        this.queryTelemetry_ = null;
        onChanged();
      } else {
        this.queryTelemetry_ = null;
        this.queryTelemetryBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder getQueryTelemetryBuilder() {

      onChanged();
      return getQueryTelemetryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    public io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder getQueryTelemetryOrBuilder() {
      if (this.queryTelemetryBuilder_ != null) {
        return this.queryTelemetryBuilder_.getMessageOrBuilder();
      } else {
        return this.queryTelemetry_ == null ?
            io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.getDefaultInstance() : this.queryTelemetry_;
      }
    }
    /**
     * <pre>
     * This DTO contains detailed information about query processing time and its decomposition to single operations.
     * </pre>
     *
     * <code>.io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder>
        getQueryTelemetryFieldBuilder() {
      if (this.queryTelemetryBuilder_ == null) {
        this.queryTelemetryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.Builder, io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetryOrBuilder>(
                getQueryTelemetry(),
                getParentForChildren(),
                isClean());
        this.queryTelemetry_ = null;
      }
      return this.queryTelemetryBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:io.evitadb.externalApi.grpc.generated.GrpcExtraResults)
  }

  // @@protoc_insertion_point(class_scope:io.evitadb.externalApi.grpc.generated.GrpcExtraResults)
  private static final io.evitadb.externalApi.grpc.generated.GrpcExtraResults DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.evitadb.externalApi.grpc.generated.GrpcExtraResults();
  }

  public static io.evitadb.externalApi.grpc.generated.GrpcExtraResults getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GrpcExtraResults>
      PARSER = new com.google.protobuf.AbstractParser<GrpcExtraResults>() {
    @java.lang.Override
    public GrpcExtraResults parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new GrpcExtraResults(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GrpcExtraResults> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GrpcExtraResults> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.evitadb.externalApi.grpc.generated.GrpcExtraResults getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

