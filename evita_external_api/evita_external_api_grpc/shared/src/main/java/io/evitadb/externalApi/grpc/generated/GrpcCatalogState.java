/*
 *
 *                         _ _        ____  ____
 *               _____   _(_) |_ __ _|  _ \| __ )
 *              / _ \ \ / / | __/ _` | | | |  _ \
 *             |  __/\ V /| | || (_| | |_| | |_) |
 *              \___| \_/ |_|\__\__,_|____/|____/
 *
 *   Copyright (c) 2023-2025
 *
 *   Licensed under the Business Source License, Version 1.1 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   https://github.com/FgForrest/evitaDB/blob/master/LICENSE
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcEnums.proto

package io.evitadb.externalApi.grpc.generated;

/**
 * <pre>
 * Indicates actual state in which Evita operates. See detailed information for each state.
 * </pre>
 *
 * Protobuf enum {@code io.evitadb.externalApi.grpc.generated.GrpcCatalogState}
 */
public enum GrpcCatalogState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Initial state of the Evita catalog.
   * This state has several limitations but also advantages.
   * This state requires single threaded access - this means only single thread can read/write data to the catalog
   * in this state. No transactions are allowed in this state and there are no guarantees on consistency of the catalog
   * if any of the WRITE operations fails. If any error is encountered while writing to the catalog in this state it is
   * strongly recommended discarding entire catalog contents and starts filling it from the scratch.
   * Writing to the catalog in this phase is much faster than with transactional access. Operations are executed in bulk,
   * transactional logic is disabled and doesn't slow down the writing process.
   * This phase is meant to quickly fill initial state of the catalog from the external primary data store. This state
   * is also planned to be used when new replica is created and needs to quickly catch up with the master.
   * </pre>
   *
   * <code>WARMING_UP = 0;</code>
   */
  WARMING_UP(0),
  /**
   * <pre>
   * Standard "serving" state of the Evita catalog.
   * All operations are executed transactionally and leave the date in consistent state even if any error occurs.
   * Multiple readers and writers can work with the catalog simultaneously.
   * </pre>
   *
   * <code>ALIVE = 1;</code>
   */
  ALIVE(1),
  /**
   * <pre>
   * State signalizing that evitaDB engine was not able to consistently open and load this catalog from the file system.
   * </pre>
   *
   * <code>CORRUPTED = 3;</code>
   */
  CORRUPTED(3),
  /**
   * <pre>
   * State signalizing that evitaDB engine didn't load this catalog from the file system, but is present in
   * the persistence storage. Catalog might be loaded into memory later on demand and start to process requests.
   * </pre>
   *
   * <code>INACTIVE = 4;</code>
   */
  INACTIVE(4),
  /**
   * <pre>
   * State signalizing that evitaDB engine is transitioning catalog from {&#64;link #WARMING_UP} to {&#64;link #ALIVE} state.
   * Until the transition is fully completed, the catalog is not able to serve any requests.
   * </pre>
   *
   * <code>GOING_ALIVE = 5;</code>
   */
  GOING_ALIVE(5),
  /**
   * <pre>
   * State signalizing that evitaDB engine is loading catalog from the file system to the memory and performing
   * initialization of the catalog. The catalog is not able to serve any requests until the initialization is fully
   * completed.
   * </pre>
   *
   * <code>BEING_ACTIVATED = 6;</code>
   */
  BEING_ACTIVATED(6),
  /**
   * <pre>
   * State signalizing that evitaDB engine is deactivating the catalog. When the operation is completed, the catalog
   * is moved to {&#64;link #INACTIVE} state.
   * </pre>
   *
   * <code>BEING_DEACTIVATED = 7;</code>
   */
  BEING_DEACTIVATED(7),
  /**
   * <pre>
   * State signalizing that evitaDB engine is creating a new catalog. The catalog is not able to serve any requests
   * until the creation is fully completed.
   * </pre>
   *
   * <code>BEING_CREATED = 8;</code>
   */
  BEING_CREATED(8),
  /**
   * <pre>
   * State signalizing that evitaDB engine is deleting the catalog. When the operation is completed, the catalog
   * is removed from the file system and is no longer available.
   * </pre>
   *
   * <code>BEING_DELETED = 9;</code>
   */
  BEING_DELETED(9),
  /**
   * <pre>
   * Unknown state of the catalog. Used when catalog is corrupted.
   * </pre>
   *
   * <code>UNKNOWN_CATALOG_STATE = 2;</code>
   */
  UNKNOWN_CATALOG_STATE(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Initial state of the Evita catalog.
   * This state has several limitations but also advantages.
   * This state requires single threaded access - this means only single thread can read/write data to the catalog
   * in this state. No transactions are allowed in this state and there are no guarantees on consistency of the catalog
   * if any of the WRITE operations fails. If any error is encountered while writing to the catalog in this state it is
   * strongly recommended discarding entire catalog contents and starts filling it from the scratch.
   * Writing to the catalog in this phase is much faster than with transactional access. Operations are executed in bulk,
   * transactional logic is disabled and doesn't slow down the writing process.
   * This phase is meant to quickly fill initial state of the catalog from the external primary data store. This state
   * is also planned to be used when new replica is created and needs to quickly catch up with the master.
   * </pre>
   *
   * <code>WARMING_UP = 0;</code>
   */
  public static final int WARMING_UP_VALUE = 0;
  /**
   * <pre>
   * Standard "serving" state of the Evita catalog.
   * All operations are executed transactionally and leave the date in consistent state even if any error occurs.
   * Multiple readers and writers can work with the catalog simultaneously.
   * </pre>
   *
   * <code>ALIVE = 1;</code>
   */
  public static final int ALIVE_VALUE = 1;
  /**
   * <pre>
   * State signalizing that evitaDB engine was not able to consistently open and load this catalog from the file system.
   * </pre>
   *
   * <code>CORRUPTED = 3;</code>
   */
  public static final int CORRUPTED_VALUE = 3;
  /**
   * <pre>
   * State signalizing that evitaDB engine didn't load this catalog from the file system, but is present in
   * the persistence storage. Catalog might be loaded into memory later on demand and start to process requests.
   * </pre>
   *
   * <code>INACTIVE = 4;</code>
   */
  public static final int INACTIVE_VALUE = 4;
  /**
   * <pre>
   * State signalizing that evitaDB engine is transitioning catalog from {&#64;link #WARMING_UP} to {&#64;link #ALIVE} state.
   * Until the transition is fully completed, the catalog is not able to serve any requests.
   * </pre>
   *
   * <code>GOING_ALIVE = 5;</code>
   */
  public static final int GOING_ALIVE_VALUE = 5;
  /**
   * <pre>
   * State signalizing that evitaDB engine is loading catalog from the file system to the memory and performing
   * initialization of the catalog. The catalog is not able to serve any requests until the initialization is fully
   * completed.
   * </pre>
   *
   * <code>BEING_ACTIVATED = 6;</code>
   */
  public static final int BEING_ACTIVATED_VALUE = 6;
  /**
   * <pre>
   * State signalizing that evitaDB engine is deactivating the catalog. When the operation is completed, the catalog
   * is moved to {&#64;link #INACTIVE} state.
   * </pre>
   *
   * <code>BEING_DEACTIVATED = 7;</code>
   */
  public static final int BEING_DEACTIVATED_VALUE = 7;
  /**
   * <pre>
   * State signalizing that evitaDB engine is creating a new catalog. The catalog is not able to serve any requests
   * until the creation is fully completed.
   * </pre>
   *
   * <code>BEING_CREATED = 8;</code>
   */
  public static final int BEING_CREATED_VALUE = 8;
  /**
   * <pre>
   * State signalizing that evitaDB engine is deleting the catalog. When the operation is completed, the catalog
   * is removed from the file system and is no longer available.
   * </pre>
   *
   * <code>BEING_DELETED = 9;</code>
   */
  public static final int BEING_DELETED_VALUE = 9;
  /**
   * <pre>
   * Unknown state of the catalog. Used when catalog is corrupted.
   * </pre>
   *
   * <code>UNKNOWN_CATALOG_STATE = 2;</code>
   */
  public static final int UNKNOWN_CATALOG_STATE_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static GrpcCatalogState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static GrpcCatalogState forNumber(int value) {
    switch (value) {
      case 0: return WARMING_UP;
      case 1: return ALIVE;
      case 3: return CORRUPTED;
      case 4: return INACTIVE;
      case 5: return GOING_ALIVE;
      case 6: return BEING_ACTIVATED;
      case 7: return BEING_DEACTIVATED;
      case 8: return BEING_CREATED;
      case 9: return BEING_DELETED;
      case 2: return UNKNOWN_CATALOG_STATE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<GrpcCatalogState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      GrpcCatalogState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<GrpcCatalogState>() {
          public GrpcCatalogState findValueByNumber(int number) {
            return GrpcCatalogState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.evitadb.externalApi.grpc.generated.GrpcEnums.getDescriptor().getEnumTypes().get(0);
  }

  private static final GrpcCatalogState[] VALUES = values();

  public static GrpcCatalogState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private GrpcCatalogState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:io.evitadb.externalApi.grpc.generated.GrpcCatalogState)
}

