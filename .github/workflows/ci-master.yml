# Main build pipeline, operates on `master` branch which is our integration branch

name: CI Master branch

on:
  push:
    branches:
      - "master"                   # trap each push to master branch
    paths:                         # but react only to changes in code or pipeline definition
      - evita*/**/*.java
      - evita*/**/pom.xml
      - jacoco/**/pom.xml
      - evita*/**/dist/**.*
      - docker/**
      - .github/**

concurrency:
  group: ${{ github.ref_name }}   # for the same branch
  cancel-in-progress: true        # run only one workflow at a time (cancel the previous)

jobs:
  build:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    outputs:
      released_version: ${{ steps.release_version.outputs.version }}
      release_branch: ${{ steps.release_branch.outputs.branch }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2    # checkout sources
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Setup Java JDK
      uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0 setup JDK 17 for building
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Compilation Check
      run: |
        mvn -T 1C -B -Dmaven.test.skip=true compile --file pom.xml
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

    - name: PGP Keys Check
      run: |
        mvn org.simplify4u.plugins:pgpverify-maven-plugin:check

    - name: Duplicate Classes Check
      run: |
        mvn duplicate-finder:check

    - name: Resolve new release version
      id: release_version
      uses: lukashornych/semantic-calendar-version@bb0a07cf0ca71a0b2b4fed52114e28092e5cac81 #v1.2.0
      with:
        prefix: 'v'
        year_switch_mode: 'OnMinor'
        minor-identifier: '/feat(?:\\([^)]+\\))?:/'
        hotfix-branch-pattern: 'release_.*'

    - name: Determine release branch name
      id: release_branch
      run: |
        # Extract version without 'v' prefix and remove patch version
        VERSION="${{ steps.release_version.outputs.version }}"
        VERSION_WITHOUT_PREFIX="${VERSION#v}"
        MAJOR_MINOR=$(echo "$VERSION_WITHOUT_PREFIX" | awk -F. '{print $1"."$2}')
        RELEASE_BRANCH="release_${MAJOR_MINOR//./-}"
        echo "branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
        echo "Release branch: $RELEASE_BRANCH"

    - name: Check if release branch exists
      id: check_branch
      run: |
        RELEASE_BRANCH="${{ steps.release_branch.outputs.branch }}"
        git fetch origin
        if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release branch $RELEASE_BRANCH exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release branch $RELEASE_BRANCH does not exist"
        fi

    - name: Create release branch
      if: steps.check_branch.outputs.exists == 'false'
      run: |
        RELEASE_BRANCH="${{ steps.release_branch.outputs.branch }}"
        git checkout -b $RELEASE_BRANCH
        git push origin $RELEASE_BRANCH
        echo "Created new release branch: $RELEASE_BRANCH"

    - name: Update release branch
      if: steps.check_branch.outputs.exists == 'true'
      run: |
        RELEASE_BRANCH="${{ steps.release_branch.outputs.branch }}"
        git fetch origin
        git checkout $RELEASE_BRANCH
        if ! git merge --ff-only origin/master; then
          echo "Error: Cannot fast-forward release branch $RELEASE_BRANCH to match master branch."
          echo "The release branch may have commits that are not in the master branch."
          exit 1
        fi
        git push origin $RELEASE_BRANCH
        echo "Fast-forwarded release branch: $RELEASE_BRANCH"

    # Create workflow data files for the release workflow
    - name: Create workflow data files
      run: |
        echo "${{ steps.release_branch.outputs.branch }}" > release_branch.txt
        echo "${{ steps.release_version.outputs.version }}" > released_version.txt

    # Upload workflow data for the release workflow
    - name: Upload workflow data
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
      with:
        name: workflow-data
        path: |
          release_branch.txt
          released_version.txt
