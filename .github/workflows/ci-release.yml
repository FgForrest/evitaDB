# Release build pipeline, operates on `release_*` branches and creates releases

name: CI Release branch

on:
  workflow_run:
    workflows: ["CI Master branch"]
    types:
      - completed
    branches:
      - "master"
  push:
    branches:
      - "release_*"
    paths: # but react only to changes in code or pipeline definition
      - evita*/**/*.java
      - evita*/**/pom.xml

jobs:
  build:
    # Run if the master workflow was successful OR if the branch is a release branch
    if: ${{ github.event.workflow_run.conclusion == 'success' || startsWith(github.ref, 'refs/heads/release_') }}

    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      released_version: ${{ steps.release_version.outputs.version }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2    # checkout sources
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Resolve new release version
      id: release_version
      uses: lukashornych/semantic-calendar-version@bb0a07cf0ca71a0b2b4fed52114e28092e5cac81 #v1.2.0
      with:
        prefix: 'v'
        year_switch_mode: 'OnMinor'
        minor-identifier: '/feat(?:\\([^)]+\\))?:/'
        hotfix-branch-pattern: 'release_.*'

    - name: Setup Java JDK
      uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0 setup JDK 17 for building
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Build with Maven
      run: |      
        export SANITIZED_VERSION=$(echo "$EVITA_BUILD_VERSION" | tr -d '\r\n')
        export NEW_VERSION="$( echo "${SANITIZED_VERSION}" | sed 's/^v//; s/-.*//')"
        echo $NEW_VERSION > version.txt
        echo "Version: $(cat version.txt)"
        mvn versions:set -DnewVersion=$NEW_VERSION
        mvn -T 1C -B -P release-sign-artifacts -Dmaven.test.skip=true deploy --file pom.xml
      env:
        EVITA_BUILD_VERSION: ${{ steps.release_version.outputs.version }}
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

    - name: Create distribution directory
      run: |
        mkdir -p ./dist
        cp LICENSE ./dist
        cp 'evita_server/target/evita-server.jar' ./dist
        cp 'evita_server/dist/run.sh' './dist'
        cp 'evita_server/dist/logback.xml' './dist'

    - name: Create .zip of dist
      uses: thedoctor0/zip-release@b57d897cb5d60cb78b51a507f63fa184cfe35554 # v0.7.6
      with:
        type: 'zip'
        filename: 'dist.zip'
        path: './dist'

    - name: Create .tar.gz of dist
      uses: thedoctor0/zip-release@b57d897cb5d60cb78b51a507f63fa184cfe35554 # v0.7.6
      with:
        type: 'tar'
        filename: 'dist.tar.gz'
        path: './dist'

    - name: Create release
      id: create_release
      uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5 # v6.1.0
      with:
        version: ${{ steps.release_version.outputs.version }}
        publish: false
        latest: ${{ github.ref_name == 'master' && 'true' || 'legacy' }}

    - name: Upload dist.zip to release
      uses: actions/upload-release-asset@64e5e85fc528f162d7ba7ce2d15a3bb67efb3d80 # v1.0.1
      if: success()
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist.zip
        asset_name: Dist (zip)
        asset_content_type: application/zip

    - name: Upload dist.tar.gz to release
      uses: actions/upload-release-asset@64e5e85fc528f162d7ba7ce2d15a3bb67efb3d80 # v1.0.1
      if: success()
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist.tar.gz
        asset_name: Dist (tar.gz)
        asset_content_type: application/gzip

    - name: Upload evitaDB server artifact
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
      if: success()
      with:
        name: evita-server.jar
        path: 'evita_server/target/evita-server.jar'

    - name: Upload evitaDB version.txt
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
      if: success()
      with:
        name: version.txt
        path: 'version.txt'
